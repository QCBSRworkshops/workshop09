[["index.html", "Atelier 9 : Analyses multivariées en R Série d’ateliers R du CSBQ Préface 0.1 Code de conduite 0.2 Contributeurs et contributrices 0.3 Contribuez à la série!", " Atelier 9 : Analyses multivariées en R Série d’ateliers R du CSBQ Développé et entretenu par les contributeurs et les contributrices de la Série d’ateliers R du CSBQ1. 2023-03-27 19:34:03 Préface La Série d’ateliers R du CSBQ est une série de 10 ateliers qui guide les participants à travers les étapes nécessaires à l’utilisation de R pour un large éventail d’analyses statistiques pertinentes pour la recherche en biologie et en écologie. Ces ateliers en accès libre ont été créés par des membres du CSBQ, à la fois pour les membres du CSBQ et pour la communauté au sens large. Le contenu de cet atelier a été revu par plusieurs membres du CSBQ. Si vous souhaitez suggérer des modifications, veuillez contacter les coordinateurs de la série actuelle, dont la liste figure sur la page principale de Github 0.1 Code de conduite La Série d’ateliers R du CSBQ et le Symposium R du CSBQ sont des lieux dédiés à fournir un environnement accueillant et favorable à toutes les personnes, indépendamment de leurs origines ou de leur identité. Les participants, les présentateurs et les organisateurs de la série d’ateliers et d’autres activités connexes acceptent le présent code de conduite lorsqu’ils assistent à des activités liées aux ateliers. Nous ne tolérons pas les comportements irrespectueux ou qui excluent, intimident ou gênent les autres. Nous ne tolérons pas la discrimination ou le harcèlement fondés sur des caractéristiques telles que, mais sans s’y limiter, l’identité et l’expression du genre, l’orientation sexuelle, le handicap, l’apparence physique, la taille du corps, la citoyenneté, la nationalité, les origines ethniques ou sociales, la grossesse, le statut familial, les informations génétiques, la religion ou les convictions (ou l’absence de celles-ci), l’appartenance à une minorité nationale, la propriété, l’âge, l’éducation, le statut socio-économique, les choix techniques et le niveau d’expérience. Il s’applique à tous les espaces gérés par l’atelier ou affiliés à celui-ci, y compris, mais sans s’y limiter, les ateliers, les listes de diffusion et les forums en ligne tels que GitHub, Slack et Twitter. 0.1.1 Comportement attendu Tous les participants sont tenus de faire preuve de respect et de courtoisie envers les autres. Toutes les interactions doivent être professionnelles, quelle que soit la plateforme utilisée : en ligne ou en personne. Afin de favoriser un environnement d’apprentissage positif et professionnel, nous encourageons les types de comportements suivants dans tous les événements et plates-formes des ateliers : Utiliser un langage accueillant et inclusif ; Respecter les différents points de vue et expériences ; Accepter avec grâce les critiques constructives ; Se concentrer sur ce qui est le mieux pour la communauté ; Faire preuve de courtoisie et de respect envers les autres membres de la communauté. 0.1.2 Comportements inacceptables Voici quelques exemples de comportements inacceptables de la part des participants à tout événement ou plateforme d’atelier : les commentaires écrits ou verbaux qui ont pour effet d’exclure des personnes sur la base de leur appartenance à un groupe spécifique ; faire craindre à quelqu’un pour sa sécurité, par exemple en le harcelant ou en l’intimidant ; des menaces ou des propos violents dirigés contre une autre personne ; l’affichage d’images sexuelles ou violentes ; l’attention sexuelle non désirée ; les contacts physiques non consensuels ou non désirés ; des insultes ou des rabais ; les blagues sexistes, racistes, homophobes, transphobes, incapables ou d’exclusion ; l’incitation à la violence, au suicide ou à l’automutilation ; la poursuite de l’interaction (y compris la photographie ou l’enregistrement) avec une personne après qu’on - lui a demandé d’arrêter ; la publication d’une communication privée sans consentement. 0.2 Contributeurs et contributrices Développé à l’origine par Bérenger Bourgeois, Xavier Giroux-Bougard, Amanda Winegardner, Emmanuelle Chrétien, Monica Granados et Pedro Henrique Pereira Braga. Le matériel contenu dans le script R provient de Borcard, Gillet &amp; Legendre (2011). Numerical Ecology with R. Springer New York. Depuis 2014, plusieurs membres du CSBQ ont contribué à développer et à mettre à jour cet atelier de manière cohérente et collaborative, dans le cadre de la bourse d’apprentissage et de développement du CSBQ. Il s’agit de : 2025 - 2024 - 2023 2022 - 2021 - 2020 2019 - 2018 - 2017 2016 - 2015 - 2014 Pedro Henrique P. Braga Pedro Henrique P. Braga Gabriel Muñoz Monica Granados Katherine Hébert Marie Hélène-Brice Emmanuelle Chrétien Mi Lin Pedro Henrique P. Braga Bérenger Bourgeois Linley Sherin Amanda Winegardner Xavier Giroux-Bougard Vincent Fugère Zofia Taranu 0.3 Contribuez à la série! En construction. La Série d’ateliers R du CSBQ fait partie du Centre de la science de la biodiversité du Québec, et est maintenue par les coordonnateurs et les coordonnatrices de la série, et les membres étudiants diplômés, postdoctoraux et professionnels de la recherche. La liste des contributeurs et des contributrices de cet atelier sont accessiblesici↩︎ "],["objectifs-dapprentissage.html", "Chapitre 1 Objectifs d’apprentissage", " Chapitre 1 Objectifs d’apprentissage Apprendre les bases de l’analyse multivariée pour révéler des modèles dans les données sur la composition des communautés. Utiliser R pour effectuer une ordination sans contrainte Apprendre à connaître les coefficients de similarité et de dissimilarité et les transformations pour effectuer une analyse multivariée Utiliser R pour créer des dendrogrammes Apprenez les méthodes suivantes : Analyse de regroupement Analyse en composantes principales (ACP) Analyse des coordonnées principales (PCoA) Échelle multidimensionnelle non métrique (NMDS) "],["préparez-vous-pour-cet-atelier.html", "Chapitre 2 Préparez-vous pour cet atelier", " Chapitre 2 Préparez-vous pour cet atelier Pour préparer cet atelier, vous devez suivre les étapes suivantes : Télécharger les données nécessaires à cet atelier : Données de DoubsEnv Données de DoubsSpe Leurs données peuvent également être récupérées à partir du paquet ade4 : library(ade4) data(doubs) spe &lt;- doubs$fish env &lt;- doubs$env Alternativement, à partir du paquet codep : library(codep) data(Doubs) spe &lt;- Doubs.fish env &lt;- Doubs.env Téléchargez le script contenant la fonction coldiss() : R script Rscript contenant la fonctioncoldiss()` Vous devez également utiliser ces paquets : ape ade4 codep gclus vegan GGally PlaneGeometry remotes MASS list.of.packages &lt;- c(&quot;ape&quot;, &quot;ade4&quot;, &quot;codep&quot;, &quot;gclus&quot;, &quot;vegan&quot;, &quot;GGally&quot;, &quot;PlaneGeometry&quot;, &quot;remotes&quot;, &quot;matlib&quot;, &quot;MASS&quot;) new.packages &lt;- list.of.packages[!(list.of.packages %in% installed.packages()[, &quot;Package&quot;])] if (length(new.packages) &gt; 0) { install.packages(new.packages, dependencies = TRUE) print(paste0(&quot;The following package was installed:&quot;, new.packages)) } else if (length(new.packages) == 0) { print(&quot;All packages were already installed previously&quot;) } ## [1] &quot;The following package was installed:ape&quot; ## [2] &quot;The following package was installed:ade4&quot; ## [3] &quot;The following package was installed:codep&quot; ## [4] &quot;The following package was installed:gclus&quot; ## [5] &quot;The following package was installed:vegan&quot; ## [6] &quot;The following package was installed:GGally&quot; ## [7] &quot;The following package was installed:PlaneGeometry&quot; ## [8] &quot;The following package was installed:remotes&quot; ## [9] &quot;The following package was installed:matlib&quot; # Chargement de toutes les bibliothèques nécessaires en une # seule fois invisible(lapply(list.of.packages, library, character.only = TRUE, quietly = TRUE)) # source(file.choose()) # utilisez coldiss.R que vous avez # téléchargé dans votre propre répertoire "],["récapitulatif-analyses-univariées.html", "Chapitre 3 Récapitulatif : Analyses univariées", " Chapitre 3 Récapitulatif : Analyses univariées Nous avons appris une multitude d’analyses qui nous ont permis d’interpréter des données écologiques en décrivant les effets d’une ou de plusieurs variables sur une variable réponse. Nous pouvons rappeler les : Les modèles linéaires généraux, dont nous avons utilisé les fonctions : lm() ; anova() ; t.test() ; lmer(). Modèles linéaires généralisés, où nous avons appris à les appliquer à l’aide de t.test() ; 4. lmer() : glm() et glmer() avec plusieurs fonctions de liaison family(). Modèles Additifs Généralisés, avec les fonctions de liaison family() et glm() : gam(). Ces modèles nous ont permis de poser des questions telles que : Quels sont les effets des précipitations et de la température sur la richesse des espèces ? Comment l’abondance des microbes change-t-elle d’un hôte à l’autre ? Les poissons cooccurrents deviennent-ils plus agressifs après avoir été incités à avoir peur ? Cependant, il peut être intéressant de faire des déductions à partir de données écologiques contenant “plus d’un” résultat ou d’une variable dépendante. Cet intérêt peut être motivé par la vérification d’hypothèses et la modélisation, mais il peut aussi être entièrement exploratoire. "],["intro-analyses-multivariées.html", "Chapitre 4 Intro : Analyses multivariées", " Chapitre 4 Intro : Analyses multivariées Par exemple, notre question de recherche pourrait être la suivante Comment la composition bactérienne des feuilles d’érable change-t-elle le long du gradient d’altitude ? Quelle est la dissemblance compositionnelle des communautés de chauves-souris ? Quelle est la proximité des communautés locales d’araignées par rapport à leur composition ? Dans tous ces cas, le résultat est composé de plusieurs variables, par exemple habituellement une matrice échantillon par espèce ou échantillon par environnement. "],["définir-nos-objectifs.html", "Chapitre 5 Définir nos objectifs", " Chapitre 5 Définir nos objectifs Nous allons maintenant nous plonger dans les statistiques multivariées, un ensemble d’outils qui nous permettra d’aborder des questions nécessitant l’observation ou l’analyse simultanée de plus d’une variable de résultat. Nous explorerons certaines méthodes, telles que: Mesures et matrices d’association (ou de dissemblance) ; L’analyse de classification (ou de regroupement) ; Ordination sans contrainte ; Ordination contrainte (ou canonique) (dans l’atelier 10). Avant tout, nous allons faire un petit rappel sur l’algèbre des matrices. "],["lalgèbre-matricielle-très-brièvement.html", "Chapitre 6 L’algèbre matricielle, très brièvement 6.1 Les ensembles de données sont des matrices 6.2 Matrices d’association", " Chapitre 6 L’algèbre matricielle, très brièvement L’algèbre matricielle est bien adaptée à l’écologie, car la plupart (sinon tous) des ensembles de données avec lesquels nous travaillons sont dans un format matrix. 6.1 Les ensembles de données sont des matrices Les tableaux de données écologiques sont obtenus sous forme d’observations d’objets ou d’unités d’échantillonnage, et sont souvent enregistrés sous cette forme : Objets \\(y_1\\) \\(y_2\\) \\(\\dots\\) \\(y_n\\) \\(x_1\\) \\(y_{1,1}\\) \\(y_{1,2}\\) \\(\\dots\\) \\(y_{1,n}\\) \\(x_2\\) \\(y_{2,1}\\) \\(y_{2,2}\\) \\(\\dots\\) \\(y_{2,n}\\) \\(\\vdots\\) \\(\\vdots\\) \\(\\vdots\\) \\(\\ddots\\) \\(\\vdots\\) \\(x_m\\) \\(y_{m,1}\\) \\(y_{m,2}\\) \\(\\dots\\) \\(y_{m,n}\\) où \\(x_m\\) est l’unité d’échantillonnage \\(m\\) ; et \\(y_n\\) est le descripteur écologique qui peut être, par exemple, les espèces présentes dans une unité d’échantillonnage, une localité ou une variable chimique. Le même tableau de données écologiques peut être représenté en notation matricielle de la manière suivante : \\[Y = [y_{m,n}] = \\begin{bmatrix} y_{1,1} &amp; y_{1,2} &amp; \\cdots &amp; y_{1,n} \\\\ y_{2,1} &amp; y_{2,2} &amp; \\cdots &amp; y_{2,n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ y_{m,1} &amp; y_{m,2} &amp; \\cdots &amp; y_{m,n} \\end{bmatrix}\\] où les lettres minuscules indiquent les éléments, et les lettres en indice indiquent la position de ces éléments dans la matrice (et dans le tableau !). De plus, tout sous-ensemble d’une matrice peut être reconnu. Nous pouvons sous-ensembler une matrice de lignes, comme ci-dessous : \\[\\begin{bmatrix} y_{1,1} &amp; y_{1,2} &amp; \\cdots &amp; y_{1,n} \\\\ \\end{bmatrix}\\] Nous pouvons également sous-ensemble une matrice de colonnes, comme ci-dessous : \\[\\begin{bmatrix} y_{1,1} \\\\ y_{2,2} \\\\ \\vdots \\\\ y_{m,2} \\end{bmatrix}\\] 6.2 Matrices d’association Deux matrices importantes peuvent être dérivées de la matrice des données écologiques : la matrice d’association entre les objets et la matrice d’association entre les descripteurs. En utilisant les données de notre matrice \\(Y\\), \\[ Y = \\begin{array}{cc} \\begin{array}{ccc} x_1 \\rightarrow\\\\ x_2 \\rightarrow\\\\ \\vdots \\\\ x_m \\rightarrow\\\\ \\end{array} &amp; \\begin{bmatrix} y_{1,1} &amp; y_{1,2} &amp; \\cdots &amp; y_{1,n} \\\\ y_{2,1} &amp; y_{2,2} &amp; \\cdots &amp; y_{2,n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ y_{m,1} &amp; y_{m,2} &amp; \\cdots &amp; y_{m,n} \\end{bmatrix} \\end{array} \\] on peut examiner la relation entre les deux premiers objets : \\[x_1 \\rightarrow \\begin{bmatrix} y_{1,1} &amp; y_{1,2} &amp; \\cdots &amp; y_{1,n} \\\\ \\end{bmatrix} \\] \\[x_2 \\rightarrow \\begin{bmatrix} y_{2,1} &amp; y_{2,2} &amp; \\cdots &amp; y_{2,n} \\\\ \\end{bmatrix} \\] et obtenir \\(a_{1,2}\\). Nous pouvons remplir la matrice d’association \\(A_{n,n}\\) avec les relations entre tous les objets de \\(Y\\) : \\[A_{n,n} = \\begin{bmatrix} a_{1,1} &amp; a_{1,2} &amp; \\cdots &amp; a_{1,n} \\\\ a_{2,1} &amp; a_{2,2} &amp; \\cdots &amp; a_{2,n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{n,1} &amp; a_{n,2} &amp; \\cdots &amp; a_{n,n} \\end{bmatrix}\\] Parce que \\(A_{n,n}\\) a le même nombre de lignes et de colonnes, on la désigne comme une matrice carrée. Donc \\(A_{n,n}\\) a \\(n^2\\) éléments. Par conséquent, \\(A_{n,n}\\) a \\(n^2\\) éléments. Nous pouvons également obtenir la relation entre les deux premiers descripteurs de \\(Y\\), \\(y_1\\) et \\(y_2\\) : \\[\\begin{bmatrix} y_{1,2} \\\\ y_{2,2} \\\\ \\vdots \\\\ y_{m,2} \\end{bmatrix}\\] \\[\\begin{bmatrix} y_{1,1} \\\\ y_{2,1} \\\\ \\vdots \\\\ y_{m,1} \\end{bmatrix}\\] et le stocker dans \\(a_{1,2}\\). Nous pouvons remplir la matrice d’association \\(A_{m,m}\\) avec les relations entre tous les descripteurs de \\(Y\\) : \\[A_{m,m} = \\begin{bmatrix} a_{1,1} &amp; a_{1,2} &amp; \\cdots &amp; a_{1,m} \\\\ a_{2,1} &amp; a_{2,2} &amp; \\cdots &amp; a_{2,m} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m,1} &amp; a_{m,2} &amp; \\cdots &amp; a_{m,m} \\end{bmatrix}\\] Cette \\(A_{m,m}\\) est une matrice carrée, et elle a \\(m^2\\) éléments. Ces matrices, (A_{n,n}) et (A_{m,m}), sont à la base des analyses Q-mode et R-mode en écologie. La R-mode consiste à analyser l’association entre des descripteurs ou des espèces, tandis que la Q-mode analyse l’association entre des OTU, des objets ou des sites. "],["exploration-de-lensemble-de-données.html", "Chapitre 7 Exploration de l’ensemble de données 7.1 Communautés de poissons du Doubs 7.2 Données environnementales de la rivière Doubs", " Chapitre 7 Exploration de l’ensemble de données Nous utiliserons deux jeux de données principaux dans la première partie de cet atelier. Ils proviennent de la thèse de doctorat de Verneaux (1973), dans laquelle il a proposé d’utiliser les espèces de poissons pour caractériser les zones écologiques le long des rivières et des ruisseaux européens. Il a recueilli des données dans 30 localités le long du Doubs, qui coule près de la frontière franco-suisse, dans les montagnes du Jura. Il a montré que les communautés de poissons étaient des indicateurs biologiques de ces masses d’eau. Leurs données sont réparties en trois matrices : L’abondance de 27 espèces de poissons dans les communautés (DoubsSpe.csv et ci-après, l’objet spe) ; Les variables environnementales enregistrées sur chaque site (DoubsEnv.csv et ici, l’objet env) ; et, Les coordonnées géographiques de chaque site. Verneaux, J. (1973) Cours d’eau de Franche-Comté (Massif du Jura). Recherches écologiques sur le réseau hydrographique du Doubs. Essai de biotypologie. Thèse d’état, Besançon. 1-257. 7.1 Communautés de poissons du Doubs Vous pouvez télécharger ces jeux de données à partir de [r.qcbs.ca/workshops/r-workshop-09] (http://r.qcbs.ca/workshops/r-workshop-09/). Nous pouvons charger leurs données à partir du répertoire data/ dans cet atelier : spe &lt;- read.csv(&quot;data/doubsspe.csv&quot;, row.names = 1) env &lt;- read.csv(&quot;data/doubsenv.csv&quot;, row.names = 1) Leurs données peuvent également être récupérées à partir du paquet ade4 : library(ade4) data(doubs) spe &lt;- doubs$fish env &lt;- doubs$env Alternativement, à partir du paquet codep : library(codep) data(Doubs) spe &lt;- Doubs.fish env &lt;- Doubs.env Nous pouvons alors explorer les objets contenant nos données nouvellement chargées. Jetons un coup d’œil aux données spe : head(spe)[, 1:8] ## CHA TRU VAI LOC OMB BLA HOT TOX ## 1 0 3 0 0 0 0 0 0 ## 2 0 5 4 3 0 0 0 0 ## 3 0 5 5 5 0 0 0 0 ## 4 0 4 5 5 0 0 0 0 ## 5 0 2 3 2 0 0 0 0 ## 6 0 3 4 5 0 0 0 0 Nous pouvons également utiliser la fonction str(), que nous avons étudiée dans les ateliers 1 et 2 : str(spe) ## &#39;data.frame&#39;: 30 obs. of 27 variables: ## $ CHA: int 0 0 0 0 0 0 0 0 0 0 ... ## $ TRU: int 3 5 5 4 2 3 5 0 0 1 ... ## $ VAI: int 0 4 5 5 3 4 4 0 1 4 ... ## $ LOC: int 0 3 5 5 2 5 5 0 3 4 ... ## $ OMB: int 0 0 0 0 0 0 0 0 0 0 ... ## $ BLA: int 0 0 0 0 0 0 0 0 0 0 ... ## $ HOT: int 0 0 0 0 0 0 0 0 0 0 ... ## $ TOX: int 0 0 0 0 0 0 0 0 0 0 ... ## $ VAN: int 0 0 0 0 5 1 1 0 0 2 ... ## $ CHE: int 0 0 0 1 2 2 1 0 5 2 ... ## $ BAR: int 0 0 0 0 0 0 0 0 0 0 ... ## $ SPI: int 0 0 0 0 0 0 0 0 0 0 ... ## $ GOU: int 0 0 0 1 2 1 0 0 0 1 ... ## $ BRO: int 0 0 1 2 4 1 0 0 0 0 ... ## $ PER: int 0 0 0 2 4 1 0 0 0 0 ... ## $ BOU: int 0 0 0 0 0 0 0 0 0 0 ... ## $ PSO: int 0 0 0 0 0 0 0 0 0 0 ... ## $ ROT: int 0 0 0 0 2 0 0 0 0 0 ... ## $ CAR: int 0 0 0 0 0 0 0 0 0 0 ... ## $ TAN: int 0 0 0 1 3 2 0 0 1 0 ... ## $ BCO: int 0 0 0 0 0 0 0 0 0 0 ... ## $ PCH: int 0 0 0 0 0 0 0 0 0 0 ... ## $ GRE: int 0 0 0 0 0 0 0 0 0 0 ... ## $ GAR: int 0 0 0 0 5 1 0 0 4 0 ... ## $ BBO: int 0 0 0 0 0 0 0 0 0 0 ... ## $ ABL: int 0 0 0 0 0 0 0 0 0 0 ... ## $ ANG: int 0 0 0 0 0 0 0 0 0 0 ... Vous pouvez également essayer certains de ces exemples ! # Essayez-en quelques-uns ! names(spe) # noms des objets dim(spe) # dimensions str(spe) # structure des objets summary(spe) # statistiques sommaires head(spe) # 6 premières lignes 7.2 Données environnementales de la rivière Doubs str(env) ## &#39;data.frame&#39;: 30 obs. of 11 variables: ## $ das: num 0.3 2.2 10.2 18.5 21.5 32.4 36.8 49.1 70.5 99 ... ## $ alt: int 934 932 914 854 849 846 841 792 752 617 ... ## $ pen: num 48 3 3.7 3.2 2.3 3.2 6.6 2.5 1.2 9.9 ... ## $ deb: num 0.84 1 1.8 2.53 2.64 2.86 4 1.3 4.8 10 ... ## $ pH : num 7.9 8 8.3 8 8.1 7.9 8.1 8.1 8 7.7 ... ## $ dur: int 45 40 52 72 84 60 88 94 90 82 ... ## $ pho: num 0.01 0.02 0.05 0.1 0.38 0.2 0.07 0.2 0.3 0.06 ... ## $ nit: num 0.2 0.2 0.22 0.21 0.52 0.15 0.15 0.41 0.82 0.75 ... ## $ amm: num 0 0.1 0.05 0 0.2 0 0 0.12 0.12 0.01 ... ## $ oxy: num 12.2 10.3 10.5 11 8 10.2 11.1 7 7.2 10 ... ## $ dbo: num 2.7 1.9 3.5 1.3 6.2 5.3 2.2 8.1 5.2 4.3 ... Il contient les variables suivantes: Variable Description das Distance from the source [km] alt Altitude [m a.s.l.] pen Slope [per thousand] deb Mean min. discharge [m3s-1] pH pH of water dur Ca conc. (hardness) [mgL-1] pho K conc. [mgL-1] nit N conc. [mgL-1] amn NH₄⁺ conc. [mgL-1] oxy Diss. oxygen [mgL-1] dbo Biol. oxygen demand [mgL-1] Vous pouvez également utiliser summary() pour obtenir des statistiques sommaires à partir des variables de env : summary(env) # statistiques sommaires "],["dist.html", "Chapitre 8 dist()", " Chapitre 8 dist() La ressemblance des communautés est presque toujours évaluée sur la base de données relatives à la composition des espèces, sous la forme d’un tableau de données site par site \\(Y_{m,n}\\). Nous pouvons obtenir une matrice d’association \\(A_{m,m}\\) sous la forme de distances ou de dissimilarités par paire \\(D_{m,m}\\) (ou de similitudes \\(S_{m,m}\\)), puis analyser ces distances. Les matrices d’association entre objets ou entre descripteurs permettent de calculer la similarité ou les distances entre objets ou descripteurs (Legendre et Legendre 2012). Dans R, nous pouvons calculer des matrices de distance ou de dissimilarité en utilisant stats::dist(). Pour plus de simplicité, nous allons le faire sans spécifier d’arguments : dist(spe) Exécutez dist(spe) de votre côté, et vous devriez observer que la sortie de `dist(spe) est une matrice triangulaire inférieure représentant les associations par paires entre les colonnes de votre matrice originale. Voyons ce que les commandes ci-dessous nous montrent : class(dist(spe)) ## [1] &quot;dist&quot; La sortie de dist() est un objet de la classe dist par défaut. Cet objet est composé d’un vecteur qui contient le triangle inférieur de la matrice de distance, réparti sur les colonnes. Vous pouvez le transformer en matrice avec as.matrix(), comme on le voit ci-dessous : as.matrix(dist(spe)) Notamment, vous pouvez forcer une matrice qui contient des distances (\\(D_{m,m}\\)) en utilisant as.dist(). Vous pouvez également explorer la structure et les dimensions de notre objet de classe dist et de notre matrice de distance : str(dist(spe)) dim(as.matrix(dist(spe))) ## [1] 30 30 "],["types-de-coefficients-de-distance.html", "Chapitre 9 Types de coefficients de distance 9.1 Distances métriques 9.2 Distances semimétriques 9.3 Distances non métriques 9.4 Représentation des matrices de distance", " Chapitre 9 Types de coefficients de distance Il existe trois groupes de coefficients de distance : métriques, sémimétriques et nonmétriques. 9.1 Distances métriques Le premier groupe est constitué des métriques, et ses coefficients satisfont aux propriétés suivantes : minimum 0 : si l’espèce \\(a\\) est égale à l’espèce \\(b\\), alors \\(D(a,b)=0\\) ; ✅ positivité : si \\(a \\neq b\\), alors \\(D(a,b) &gt; 0\\) ; ✅ symétrie : \\(D(a,b) = D(b,a)\\) ; ✅ inégalité triangulaire : \\(D(a,b) + D(b,c) \\geq D(a,c)\\). La somme de deux côtés d’un triangle tracé dans l’espace euclidien est égale ou supérieure au troisième côté. ✅ Nous pouvons repérer toutes ces propriétés ci-dessous : as.matrix(dist(spe))[1:6, 1:6] ## 1 2 3 4 5 6 ## 1 0.000000 5.385165 7.416198 7.874008 10.816654 7.348469 ## 2 5.385165 0.000000 2.449490 4.123106 10.677078 4.582576 ## 3 7.416198 2.449490 0.000000 3.000000 10.862780 4.123106 ## 4 7.874008 4.123106 3.000000 0.000000 9.219544 2.828427 ## 5 10.816654 10.677078 10.862780 9.219544 0.000000 8.185353 ## 6 7.348469 4.582576 4.123106 2.828427 8.185353 0.000000 9.1.1 Distances euclidiennes La mesure de distance métrique la plus courante est la distance euclidienne. La distance euclidienne est une mesure de la distance entre deux points dans l’espace euclidien. En deux dimensions, la distance euclidienne entre deux points (x1, y1) et (x2, y2) peut être calculée à l’aide du théorème de Pythagore : \\[D_{1} (x_1,x_2) = \\sqrt{\\sum_{j=1}^p(y_{1j} - y_{2j})^2}\\] La distance euclidienne est une mesure couramment utilisée dans les analyses multivariées, car elle offre un moyen simple et intuitif de mesurer la distance ou la similarité entre les observations dans un espace multidimensionnel. En utilisant stats::dist(), nous pouvons la calculer avec : spe.D.Euclid &lt;- dist(x = spe, method = &quot;euclidean&quot;) Et nous pouvons tester si une distance est euclidienne en utilisant : is.euclid(spe.D.Euclid) ## [1] TRUE 9.1.2 Défi #1 Votre tour! En utilisant la fonction dist(), calculez la matrice de distance euclidienne \\(D_{hmm}\\) pour les abondances d’espèces par matrice de site \\(Y_{hmm}\\) ci-dessous : Sites \\(y_1\\) \\(y_2\\) \\(y_3\\) \\(s_1\\) 0 4 8 \\(s_2\\) 0 1 1 \\(s_3\\) 1 0 0 Y.hmm &lt;- data.frame(y1 = c(0, 0, 1), y2 = c(4, 1, 0), y3 = c(8, 1, 0)) Après cela, examinez les chiffres, réfléchissez-y de manière critique ! Solution: Vous devriez obtenir quelque chose de similaire à ceci : Y.hmm.DistEu &lt;- dist(x = Y.hmm, method = &quot;euclidean&quot;) as.matrix(Y.hmm.DistEu) ## 1 2 3 ## 1 0.000000 7.615773 9.000000 ## 2 7.615773 0.000000 1.732051 ## 3 9.000000 1.732051 0.000000 Maintenant, regardez la composition et les distances entre les sites \\(s_2\\) et \\(s_3\\) et entre \\(s_1\\) et \\(s_2\\). Que se passe-t-il ? La distance euclidienne entre les sites \\(s_2\\) et \\(s_3\\), qui n’ont aucune espèce en commun, est plus petite que la distance entre \\(s_1\\) et \\(s_2\\), qui partagent les espèces \\(y_2\\) et \\(y_3\\) ( !). D’un point de vue écologique, il s’agit d’une évaluation problématique de la relation entre les sites. Ce problème est connu sous le nom de problème du double zéro, *c’est-à-dire que les doubles zéros sont traités de la même manière que les doubles présences, de sorte que les doubles zéros réduisent la distance entre deux sites. Les distances euclidiennes ( \\(D_1\\) ) ne doivent donc pas être utilisées pour comparer des sites sur la base de l’abondance des espèces. 9.1.3 Distances d’accord Orlóci (1967) a proposé la distance de corde pour analyser la composition des communautés. La distance de corde, également connue sous le nom de distance angulaire ou distance de grand cercle, est une mesure de la distance entre deux points sur une sphère, telle que la Terre. Elle se compose de : 1. Normaliser les données, c’est-à-dire mettre à l’échelle les vecteurs de site à la longueur 1 en divisant les abondances des espèces dans un échantillon donné par la somme à racine carrée des abondances carrées dans tous les échantillons, comme suit \\[y&#39;_{Uj}=y_{Uj}/\\sum^s_{j=1}{y^2_{Uj}}\\] 2. Calculer les distances euclidiennes sur ces données normalisées : \\[D_{3} (x_1,x_2) = \\sqrt{\\sum_{j=1}^p(y&#39;_{1j} - y&#39;_{2j})^2}\\] Nous pouvons utiliser vegan::vegdist() pour cela : spe.D.Ch &lt;- vegdist(spe, method = &quot;chord&quot;) ## Warning in vegdist(spe, method = &quot;chord&quot;): you have empty rows: their dissimilarities may be ## meaningless in method &quot;chord&quot; ## Warning in vegdist(spe, method = &quot;chord&quot;): missing values in results as.matrix(spe.D.Ch)[1:3, 1:3] ## 1 2 3 ## 1 0.0000000 0.7653669 0.9235374 ## 2 0.7653669 0.0000000 0.2309609 ## 3 0.9235374 0.2309609 0.0000000 Lorsque deux sites partagent les mêmes espèces dans les mêmes proportions du nombre d’individus, la valeur de \\(D_3\\) est de 0$, et lorsqu’aucune espèce n’est partagée, sa valeur est de \\(\\sqrt{2}\\). Que se passe-t-il si nous calculons les distances d’accord dans la même matrice site par espèce \\(Y_{hmm}\\) ? Essayons de calculer les distances d’accord dans la même matrice que celle utilisée pour le défi n° 1 : Y.hmm.DistCh &lt;- vegdist(Y.hmm, method = &quot;chord&quot;) as.matrix(Y.hmm.DistCh) ## 1 2 3 ## 1 0.0000000 0.3203645 1.414214 ## 2 0.3203645 0.0000000 1.414214 ## 3 1.4142136 1.4142136 0.000000 Comparons maintenant avec ce que nous avons obtenu en utilisant les distances euclidiennes : as.matrix(Y.hmm.DistEu) ## 1 2 3 ## 1 0.000000 7.615773 9.000000 ## 2 7.615773 0.000000 1.732051 ## 3 9.000000 1.732051 0.000000 Voyez à nouveau à quoi ressemble notre matrice : Y.hmm ## y1 y2 y3 ## 1 0 4 8 ## 2 0 1 1 ## 3 1 0 0 Ainsi, l’ajout d’un nombre quelconque de doubles zéros à une paire de sites ne change pas la valeur de \\(D_3\\). Par conséquent, les distances de corde peuvent être utilisées pour comparer des sites décrits par des abondances d’espèces ! 9.1.4 Coefficient de Jaccard Un autre coefficient d’association populaire est le coefficient de similarité de Jaccard (1900). Le coefficient de similarité de Jaccard a été proposé à l’origine par le mathématicien français Paul Jaccard en 1901, dans le contexte de l’écologie. Jaccard s’intéressait à la comparaison de la composition en espèces de différentes communautés végétales et a proposé l’indice de Jaccard comme mesure de la similarité entre deux communautés sur la base de leur richesse en espèces. Le coefficient de similarité de Jaccard n’est approprié que pour les données binaires, et son coefficient de distance est défini par la taille de l’intersection divisée par la taille de l’union des ensembles d’échantillons. \\[D_{7}(x_1,x_2) = 1 - \\frac{\\vert x_1 \\cap x_2 \\vert}{\\vert x_1 \\cup x_2 \\vert} = 1 - \\frac{\\vert x_1 \\cap x_2 \\vert}{\\vert x_1 \\vert + \\vert x_2 \\vert - \\vert x_1 \\cap x_2 \\vert} = 1-\\frac{a}{a+b+c}\\] où, \\(a\\) est le nombre d’espèces partagées entre \\(x_1\\) et \\(x_2\\) qui sont codées \\(1\\) ; \\(b\\) est le nombre d’occurrences où l’on sait que \\(x_1\\) et \\(x_2\\) sont différents ; c$ est le nombre d’absences communes entre \\(x_1\\) et \\(x_2\\), *c.-à-d. toutes deux 0$. Par exemple, pour les sites \\(x_1\\) et \\(x_2\\) : \\(x_1,x_2\\) \\(y_1\\) \\(y_2\\) \\(y_3\\) \\(y_4\\) \\(y_5\\) \\(x_1\\) 0 1 0 1 0 \\(x_2\\) 0 1 1 1 1 On peut donc calculer \\(a\\), \\(b\\) et \\(c\\) : - \\(a\\) = 1 + 1 = 2 \\(b\\) = 1 + 1 = 2 \\(c\\) = 1 Et donc notre coefficient de distance : \\[D_{7}(x_1,x_2) = 1-\\frac{2}{2+2+1}= 0.6\\] Dans R, vous pouvez utiliser la fonction vegan::vegdist() pour calculer le coefficient de Jaccard : spe.D.Jac &lt;- vegdist(spe, method = &quot;jaccard&quot;, binary = TRUE) ## Warning in vegdist(spe, method = &quot;jaccard&quot;, binary = TRUE): you have empty rows: their dissimilarities may be ## meaningless in method &quot;jaccard&quot; 9.2 Distances semimétriques Le deuxième groupe est constitué des distances sémimétriques, et elles violent la propriété de l’inégalité des triangles : minimum 0 : si l’espèce \\(a\\) est égale à l’espèce \\(b\\), alors \\(D(a,b)=0\\) ; ✅ positivité : si \\(a \\neq b\\), alors \\(D(a,b) &gt; 0\\) ; ✅ symétrie : \\(D(a,b) = D(b,a)\\) ; ✅ inégalité des triangles : \\({D(a,b) + D(b,c) \\geq ou &lt; D(a,c)}\\). La somme de deux côtés d’un triangle tracé dans l’espace euclidien n’est pas égale ou supérieure au troisième côté. ❌ 9.2.1 Coefficient de Sørensen Tous les paramètres du coefficient de similarité de Jaccard ont le même poids. \\[D_{7}(x_1,x_2)=1-\\frac{a}{a+b+c}\\] Cependant, vous pouvez considérer que la présence d’une espèce est plus informative que son absence. La distance correspondant au coefficient de similarité de Sørensen (1948) donne du poids aux doubles présences : \\[D_{13}(x_1,x_2)=1-\\frac{2a}{2a+b+c}=\\frac{b+c}{2a+b+c}\\] où, \\(a\\) est le nombre d’espèces partagées entre \\(x_1\\) et \\(x_2\\) qui sont codées \\(1\\) ; \\(b\\) est le nombre d’occurrences où l’on sait que \\(x_1\\) et \\(x_2\\) sont différents ; \\(c\\) est le nombre d’absences communes entre \\(x_1\\) et \\(x_2\\), *c’est-à-dire les deux 0$. Dans R, vous pouvez également utiliser la fonction vegan::vegdist() pour calculer le coefficient de Sørensen : spe.D.Sor &lt;- vegdist(spe, method = &quot;bray&quot;, binary = TRUE) ## Warning in vegdist(spe, method = &quot;bray&quot;, binary = TRUE): you have empty rows: their dissimilarities may be ## meaningless in method &quot;bray&quot; Comme les coefficients de Jaccard et de Sørensen ne sont appropriés que pour les données de présence-absence, vous devez effectuer une transformation binaire des données d’abondance en utilisant binary = TRUE dans vegdist(). 9.2.2 Coefficient de Bray-Curtis Le coefficient de dissimilarité de Bray-Curtis est une version modifiée de l’indice de Sørensen et tient compte de l’abondance des espèces : \\[D_{14}(x_1,x_2)=\\frac{\\sum{\\vert y_{1j}-y_{2j}\\vert}}{\\sum{( y_{1j}+y_{2j})}}=\\] \\[D_{14}(x_1,x_2)=1 - \\frac{2W}{A+B}\\] où, \\(W\\) est la somme des abondances les plus faibles de chaque espèce trouvée entre les sites \\(x_1\\) et \\(x_2\\) ; \\(A\\) est la somme de toutes les abondances dans \\(x_1\\) ; et, \\(B\\) est la somme de toutes les abondances dans \\(x_2\\). Par exemple, pour les sites \\(x_1\\) et \\(x_2\\) : \\(x_1,x_2\\) \\(y_1\\) \\(y_2\\) \\(y_3\\) \\(y_4\\) \\(y_5\\) \\(x_1\\) 2 1 0 5 2 \\(x_2\\) 5 1 3 1 1 Alors: \\(W = 2 + 1 + 0 + 1 + 1 = 5\\) \\(A = 2 + 1 + 0 + 5 + 0 = 8\\) \\(B = 5 + 1 + 3 + 1 + 2 = 12\\) \\[D_{14}(x_1,x_2) = 1-\\frac{2 \\times 5}{8+12} = 0.5\\] Pour calculer le coefficient de dissimilarité de Bray-Curtis, qui peut prendre en compte les abondances, vous devez définir binary = FALSE. spe.db.pa &lt;- vegdist(spe, method = &quot;bray&quot;, binary = FALSE) ## Warning in vegdist(spe, method = &quot;bray&quot;, binary = FALSE): you have empty rows: their dissimilarities may be ## meaningless in method &quot;bray&quot; spe.db &lt;- as.matrix(spe.db.pa) 9.3 Distances non métriques Les distances non métriques ne satisfont pas les propriétés métriques de symétrie, d’inégalité des triangles et d’identité des indiscernables : minimum 0 : si l’espèce \\(a\\) est égale à l’espèce \\(b\\), alors \\(D(a,b)=0\\) ; ✅ positivité : si \\(a \\neq b\\), alors \\(D(a,b) &gt; ou &lt; 0\\) ; ❌ symétrie : \\(D(a,b) = D(b,a)\\) ; ✅ inégalité des triangles : \\({D(a,b) + D(b,c) \\geq ou &lt; D(a,c)}\\). La somme de deux côtés d’un triangle tracé dans l’espace euclidien n’est pas égale ou supérieure au troisième côté. ❌ 9.3.1 Distance de Mahalanobis La distance de Mahalanobis entre un point \\(x\\) et un groupe de points de moyenne \\(\\mu\\) et de covariance \\(\\Sigma\\) est définie comme suit : \\[ D_{M}(x, \\mu)=\\sqrt{(x-\\mu)^{T} \\Sigma^{-1}(x-\\mu)} \\] où \\(T\\) représente la transposition et \\(\\Sigma^{-1}\\) est l’inverse (ou l’inverse généralisé) de la matrice de covariance \\(\\Sigma\\). La distance de Mahalanobis est une mesure de la distance entre un point et un groupe de points, qui tient compte de la structure de covariance des données. L’inverse de la matrice de covariance peut ne pas exister dans certains cas, par exemple lorsque les variables sont linéairement dépendantes ou lorsqu’il y a plus de variables que d’observations. Dans ces cas, nous pouvons utiliser l’inverse généralisé de la matrice de covariance au lieu de l’inverse pour calculer la distance de Mahalanobis. Cette inverse généralisée peut être calculée à l’aide de différentes méthodes, telles que la pseudo-inverse de Moore-Penrose ou la décomposition en valeurs singulières. # Créer une matrice x &lt;- matrix(rnorm(100 * 3), ncol = 3) # Calculer la matrice de covariance et son inverse # généralisé cov_mat &lt;- cov(x) cov_inv &lt;- MASS::ginv(cov_mat) # Calculer la distance de Mahalanobis en utilisant # l&#39;inverse généralisé mah_dist &lt;- mahalanobis(x, colMeans(x), cov_inv) # Imprimer la distance de Mahalanobis mah_dist ## [1] 1.6333615 8.2638225 7.6371632 7.9645112 7.3950840 3.9511923 ## [7] 0.6719701 1.2790553 19.9758447 5.5343360 1.9066793 2.5467632 ## [13] 18.2462825 4.7159818 3.5950914 3.1871962 3.4759397 1.7764996 ## [19] 0.5974142 8.9296462 9.1470735 2.4361820 2.2473491 2.1349808 ## [25] 5.5318997 6.4615493 6.5122849 8.7572546 5.2732208 1.6412274 ## [31] 2.3540583 0.5971998 14.0443086 1.5285220 1.5538400 0.1157598 ## [37] 2.8859654 4.2233685 5.0997459 0.6459499 1.4097440 3.4793937 ## [43] 4.8303942 3.6531025 11.9254386 5.2427706 0.7587315 3.3155899 ## [49] 5.1716175 0.2043444 9.4651610 1.4931354 0.3381389 4.5972039 ## [55] 2.1311536 6.4009584 2.3636371 2.4586476 2.9058956 2.6674844 ## [61] 0.1546744 0.9982329 0.8486829 4.1664324 6.6193625 5.3729651 ## [67] 4.7992751 1.6936433 2.5706305 1.8994898 1.9360071 0.3502614 ## [73] 9.3106625 4.0849285 2.6191792 3.7539920 1.1056507 4.7667610 ## [79] 2.0091646 8.2142233 6.5627198 2.1773824 5.6802405 0.2499022 ## [85] 2.5452155 6.5234507 3.1444226 1.0842473 4.2727105 1.1747174 ## [91] 1.9055379 3.5626860 1.8641607 3.3611391 1.7698502 3.6802622 ## [97] 1.2437255 0.9574402 1.5393089 0.2154133 9.4 Représentation des matrices de distance Nous pouvons créer des représentations graphiques des matrices d’association à l’aide de la fonction coldiss() : # coldiss() function Color plots of a dissimilarity matrix, # without and with ordering License: GPL-2 Author: Francois # Gillet, 23 August 2012 &quot;coldiss&quot; &lt;- function(D, nc = 4, byrank = TRUE, diag = FALSE) { require(gclus) if (max(D) &gt; 1) D &lt;- D/max(D) if (byrank) { spe.color &lt;- dmat.color(1 - D, cm.colors(nc)) } else { spe.color &lt;- dmat.color(1 - D, byrank = FALSE, cm.colors(nc)) } spe.o &lt;- order.single(1 - D) speo.color &lt;- spe.color[spe.o, spe.o] op &lt;- par(mfrow = c(1, 2), pty = &quot;s&quot;) if (diag) { plotcolors(spe.color, rlabels = attributes(D)$Labels, main = &quot;Dissimilarity Matrix&quot;, dlabels = attributes(D)$Labels) plotcolors(speo.color, rlabels = attributes(D)$Labels[spe.o], main = &quot;Ordered Dissimilarity Matrix&quot;, dlabels = attributes(D)$Labels[spe.o]) } else { plotcolors(spe.color, rlabels = attributes(D)$Labels, main = &quot;Dissimilarity Matrix&quot;) plotcolors(speo.color, rlabels = attributes(D)$Labels[spe.o], main = &quot;Ordered Dissimilarity Matrix&quot;) } par(op) } # Utilisation : coldiss(D = dissimilarity.matrix, nc = 4, # byrank = TRUE, diag = FALSE) # Si D n&#39;est pas une matrice de dissimilarité (max(D) &gt; 1), # alors D est divisée par max(D) nc nombre de couleurs # (classes) byrank = TRUE classes de taille égale byrank = # FALSE intervalles de longueur égale diag = TRUE imprime # les étiquettes des objets également sur la diagonale # Exemple : coldiss(spe.dj, nc=9, byrank=F, diag=T) coldiss(spe.D.Jac) Vous pouvez également utiliser ggplot2::ggplot() pour représenter votre matrice en utilisant geom_tile() : # obtenir l&#39;ordre des lignes et des colonnes order_spe.D.Jac &lt;- hclust(spe.D.Jac, method = &quot;complete&quot;)$order # réorganiser la matrice pour produire une figure ordonnée # par similarités order_spe.D.Jac_matrix &lt;- as.matrix(spe.D.Jac)[order_spe.D.Jac, order_spe.D.Jac] # converts to data frame molten_spe.D.Jac &lt;- reshape2::melt(as.matrix(order_spe.D.Jac_matrix)) # créer un objet ggplot ggplot(data = molten_spe.D.Jac, aes(x = Var1, y = Var2, fill = value)) + geom_tile() + scale_fill_gradient(low = &quot;white&quot;, high = &quot;black&quot;) + theme_minimal() "],["transformations.html", "Chapitre 10 Transformations 10.1 Transformation présence-absence 10.2 Transformation des profils d’espèces 10.3 Transformation de Hellinger 10.4 Normalisation par le score Z", " Chapitre 10 Transformations Les communautés échantillonnées dans des conditions environnementales homogènes ou courtes peuvent avoir des compositions d’espèces avec peu de zéros, de sorte que les distances euclidiennes pourraient suffire à les caractériser. Néanmoins, c’est rarement la réalité. Les espèces peuvent être très fréquentes lorsque les conditions sont favorables, ou absentes de nombreux sites. Parfois, cette asymétrie peut introduire des problèmes parasites dans nos analyses. Nous devons alors transformer nos données de composition pour les analyser de manière appropriée. Dans R, nous pouvons compter sur vegan::decostand() pour de nombreux types de transformations. Jetez un coup d’oeil à l’aide de cette fonction pour voir les options disponibles : ?decostand() 10.1 Transformation présence-absence Nous pouvons changer l’argument method en \"pa\" dans vegdist() pour transformer nos données d’abondance en données de présence-absence : Si \\(y_{ij} \\geq 1\\), alors, \\(y&#39;_{ij} = 1\\). Rappelons notre jeu de données spe : spe[1:6, 1:6] ## CHA TRU VAI LOC OMB BLA ## 1 0 3 0 0 0 0 ## 2 0 5 4 3 0 0 ## 3 0 5 5 5 0 0 ## 4 0 4 5 5 0 0 ## 5 0 2 3 2 0 0 ## 6 0 3 4 5 0 0 Transformons les abondances spe en présences-absences : spe.pa &lt;- decostand(spe, method = &quot;pa&quot;) spe.pa[1:6, 1:6] ## CHA TRU VAI LOC OMB BLA ## 1 0 1 0 0 0 0 ## 2 0 1 1 1 0 0 ## 3 0 1 1 1 0 0 ## 4 0 1 1 1 0 0 ## 5 0 1 1 1 0 0 ## 6 0 1 1 1 0 0 10.2 Transformation des profils d’espèces Il arrive que l’on veuille supprimer les effets des unités très abondantes. Nous pouvons transformer les données en profils d’abondance relative des espèces à l’aide de l’équation suivante : \\[y&#39;_{ij} = \\frac{y_{ij}}{y_{i+}}\\] où \\(yi+\\) indique le nombre total de l’échantillon sur toutes les espèces \\(j=1,...,m\\), pour le \\(i\\)-ième échantillon. Dans decostand(), nous pouvons utiliser la méthode avec \"total\" : spe.total &lt;- decostand(spe, method = &quot;total&quot;) spe.total[1:5, 1:6] ## CHA TRU VAI LOC OMB BLA ## 1 0 1.00000000 0.00000000 0.00000000 0 0 ## 2 0 0.41666667 0.33333333 0.25000000 0 0 ## 3 0 0.31250000 0.31250000 0.31250000 0 0 ## 4 0 0.19047619 0.23809524 0.23809524 0 0 ## 5 0 0.05882353 0.08823529 0.05882353 0 0 10.3 Transformation de Hellinger Nous pouvons prendre la racine carrée de la transformation du profil d’espèce et obtenir la transformation de Hellinger, qui possède de très bonnes propriétés mathématiques et nous permet de réduire les effets des valeurs de \\(y_{ij}\\) qui sont extrêmement grandes. \\[y&#39;_{ij} = \\sqrt{\\frac{y_{ij}}{y_{i+}}}\\] Dans decostand(), nous pouvons changer l’argument method avec \"hellinger\" : spe.total &lt;- decostand(spe, method = &quot;hellinger&quot;) spe.total[1:5, 1:6] ## CHA TRU VAI LOC OMB BLA ## 1 0 1.0000000 0.0000000 0.0000000 0 0 ## 2 0 0.6454972 0.5773503 0.5000000 0 0 ## 3 0 0.5590170 0.5590170 0.5590170 0 0 ## 4 0 0.4364358 0.4879500 0.4879500 0 0 ## 5 0 0.2425356 0.2970443 0.2425356 0 0 10.4 Normalisation par le score Z La normalisation par le score Z, également connue sous le nom de normalisation par le score standard, est une technique utilisée pour transformer une distribution de données en une distribution normale standard avec une moyenne de 0 et un écart-type de 1. Elle consiste à soustraire la moyenne des données et à la diviser par l’écart-type. La normalisation des variables environnementales est cruciale, car il est impossible de comparer les effets de variables ayant des unités différentes : ## `?`(decostand) env.z &lt;- decostand(env, method = &quot;standardize&quot;) Cela permet de centrer et d’échelonner les variables afin de rendre votre analyse en cours plus appropriée : apply(env.z, 2, mean) ## das alt pen deb pH ## 1.000429e-16 1.814232e-18 -1.659010e-17 1.233099e-17 -4.096709e-15 ## dur pho nit amm oxy ## 3.348595e-16 1.327063e-17 -8.925898e-17 -4.289646e-17 -2.886092e-16 ## dbo ## 7.656545e-17 apply(env.z, 2, sd) ## das alt pen deb pH dur pho nit amm oxy dbo ## 1 1 1 1 1 1 1 1 1 1 1 Nous verrons plus de détails sur cette transformation dans les prochaines sections ! 10.4.0.1 Petite révision Association - “terme général décrivant toute mesure ou tout coefficient permettant de quantifier la ressemblance ou la différence entre des objets ou des descripteurs. Dans une analyse entre descripteurs, zéro signifie qu’il n’y a pas d’association.” (Legendre et Legendre 2012). Similarité - une mesure qui est “maximale (S=1) lorsque deux objets sont identiques et minimale lorsque deux objets sont complètement différents.” (Legendre et Legendre 2012). La distance (également appelée dissimilarité) - est une mesure qui est “maximale (D=1) lorsque deux objets sont complètement différents”. (Legendre et Legendre 2012). Distance ou dissimilarité (D) = 1-S Le choix d’une mesure d’association dépend de vos données, mais aussi de ce que vous savez, d’un point de vue écologique, à propos de vos données. Voici quelques mesures de dissimilarité (distance) couramment utilisées (d’après Gotelli et Ellison 2004) : Nom de la mesure Propriété Description Euclidean Metric Distance between two points in 2D space. Manhattan Metric Distance between two points, where the distance is the sum of differences of their Cartesian coordinates, i.e. if you were to make a right able between the points. Chord Metric This distance is generally used to assess differences due to genetic drift. Mahalanobis Metric Distance between a point and a set distribution, where the distance is the number of standard deviations of the point from the mean of the distribution. Chi-square Metric Similar to Euclidean. Bray-Curtis Semi-metric Dissimilarity between two samples (or sites) where the sum of lower values for species present in both samples are divided by the sum of the species counted in each sample. Jaccard Metric Description Sorensen’s Semi-metric Bray-Curtis is 1 - Sorensen 10.4.1 Autres métriques d’association Données environnementales quantitatives Examinons les associations entre les variables environnementales (également connues sous le nom d’analyse des modes Q) : `?`(dist) # matrice de distance euclidienne des variables # environnementales standardisées env.de &lt;- dist(env.z, method = &quot;euclidean&quot;) windows() # Créer une fenêtre graphique séparée coldiss(env.de, diag = TRUE) Nous pouvons alors examiner la dépendance entre les variables environnementales (également connue sous le nom d’analyse de mode R) : (env.pearson &lt;- cor(env)) # Calcul du r de Pearson entre les variables round(env.pearson, 2) # Arrondit les coefficients à 2 points décimaux (env.ken &lt;- cor(env, method = &quot;kendall&quot;)) # Corrélation de rang du tau de Kendall round(env.ken, 2) La corrélation de Pearson mesure la corrélation linéaire entre deux variables. Le tau de Kendall est une corrélation de rang, ce qui signifie qu’il quantifie la relation entre deux descripteurs ou variables lorsque les données sont ordonnées au sein de chaque variable. Dans certains cas, il peut y avoir des types mixtes de variables environnementales. Le mode Q peut toujours être utilisé pour trouver des associations entre ces variables environnementales. Pour ce faire, nous commencerons par créer un exemple de cadre de données : var.g1 &lt;- rnorm(30, 0, 1) var.g2 &lt;- runif(30, 0, 5) var.g3 &lt;- gl(3, 10) var.g4 &lt;- gl(2, 5, 30) (dat2 &lt;- data.frame(var.g1, var.g2, var.g3, var.g4)) str(dat2) summary(dat2) Une matrice de dissimilarité peut être générée pour ces variables mixtes à l’aide de la matrice de dissimilarité de Gower : ?daisy #Cette fonction peut gérer les NA dans les données (dat2.dg &lt;- daisy(dat2, metric=&quot;gower&quot;)) coldiss(dat2.dg) Défi 1 - Avancé Calculez la dissimilarité de Bray-Curtis et la dissimilarité de Gower de l’abondance des espèces CHA, TRU et VAI pour les sites 1, 2 et 3 (en utilisant les cadres de données “spe” et “env”) sans utiliser la fonction decostand(). Défi 1 - Solution avancée Sous-ensembler des données sur les espèces de sorte que seuls les sites 1 et 2 soient inclus et que seules les espèces CHA, TRU et VAI soient prises en compte. spe.challenge &lt;- spe[1:3, 1:3] #”[1:3,” refers to rows 1 to 3 while “,1:3]” refers to the first 3 species columns (in #this case the three variables of interest) Déterminer l’abondance totale des espèces pour chaque site d’intérêt (somme des trois lignes). Ce chiffre servira de dénominateur dans l’équation ci-dessus. (Abund.s1 &lt;- sum(spe.challenge[1, ])) (Abund.s2 &lt;- sum(spe.challenge[2, ])) (Abund.s3 &lt;- sum(spe.challenge[3, ])) # () around code will cause output to print right away in # console Calculez maintenant la différence d’abondance des espèces pour chaque paire de sites. Par exemple, quelle est la différence entre l’abondance de CHA et de TRU dans le site 1 ? Vous devez calculer les différences suivantes : CHA et TRU site 1 CHA et VAI site 1 TRU et VAI site 1 CHA et TRU site 2 CHA et VAI site 2 TRU et VAI site 2 CHA et TRU site 3 CHA et VAI site 3 TRU et VAI site 3 Spec.s1s2 &lt;- 0 Spec.s1s3 &lt;- 0 Spec.s2s3 &lt;- 0 for (i in 1:3) { Spec.s1s2 &lt;- Spec.s1s2 + abs(sum(spe.challenge[1, i] - spe.challenge[2, i])) Spec.s1s3 &lt;- Spec.s1s3 + abs(sum(spe.challenge[1, i] - spe.challenge[3, i])) Spec.s2s3 &lt;- Spec.s2s3 + abs(sum(spe.challenge[2, i] - spe.challenge[3, i])) } Prenez maintenant les différences que vous avez calculées comme numérateur dans l’équation de la dissimilarité de Bray-Curtis et l’abondance totale des espèces que vous avez déjà calculée comme dénominateur. (db.s1s2 &lt;- Spec.s1s2/(Abund.s1 + Abund.s2)) #Site 1 comparé au site 2 (db.s1s3 &lt;- Spec.s1s3/(Abund.s1 + Abund.s3)) #Site 1 comparé au site 3 (db.s2s3 &lt;- Spec.s2s3/(Abund.s2 + Abund.s3)) #Site 2 comparé au site 3 Vous devriez trouver des valeurs de 0,5 pour le site 1 vers le site 2, 0,538 pour le site 1 vers le site 3 et 0,053 pour le site 2 vers le site 3. Vérifiez vos résultats manuels avec ceux que vous obtiendriez en utilisant la fonction vegdist() avec la méthode de Bray-Curtis : (spe.db.challenge &lt;- vegdist(spe.challenge, method = &quot;bray&quot;)) Une matrice ressemblant à celle-ci est produite, qui devrait être identique à vos calculs manuels : Site 1 Site 2 Site 2 0.5 -- Site 3 0.538 0.0526 Pour la dissimilarité de Gower, procédez de la même manière mais utilisez l’équation appropriée : # Calculez le nombre de colonnes dans votre jeu de données M &lt;- ncol(spe.challenge) # Calculez les différences d&#39;abondance entre les paires de # sites pour chaque espèce Spe1.s1s2 &lt;- abs(spe.challenge[1, 1] - spe.challenge[2, 1]) Spe2.s1s2 &lt;- abs(spe.challenge[1, 2] - spe.challenge[2, 2]) Spe3.s1s2 &lt;- abs(spe.challenge[1, 3] - spe.challenge[2, 3]) Spe1.s1s3 &lt;- abs(spe.challenge[1, 1] - spe.challenge[3, 1]) Spe2.s1s3 &lt;- abs(spe.challenge[1, 2] - spe.challenge[3, 2]) Spe3.s1s3 &lt;- abs(spe.challenge[1, 3] - spe.challenge[3, 3]) Spe1.s2s3 &lt;- abs(spe.challenge[2, 1] - spe.challenge[3, 1]) Spe2.s2s3 &lt;- abs(spe.challenge[2, 2] - spe.challenge[3, 2]) Spe3.s2s3 &lt;- abs(spe.challenge[2, 3] - spe.challenge[3, 3]) # Calculer l&#39;étendue de l&#39;abondance de chaque espèce entre # les sites Range.spe1 &lt;- max(spe.challenge[, 1]) - min(spe.challenge[, 1]) Range.spe2 &lt;- max(spe.challenge[, 2]) - min(spe.challenge[, 2]) Range.spe3 &lt;- max(spe.challenge[, 3]) - min(spe.challenge[, 3]) # Calculer la dissimilarité de Gower (dg.s1s2 &lt;- (1/M) * ((Spe2.s1s2/Range.spe2) + (Spe3.s1s2/Range.spe3))) (dg.s1s3 &lt;- (1/M) * ((Spe2.s1s3/Range.spe2) + (Spe3.s1s3/Range.spe3))) (dg.s2s3 &lt;- (1/M) * ((Spe2.s2s3/Range.spe2) + (Spe3.s2s3/Range.spe3))) # Comparez vos résultats (spe.db.challenge &lt;- vegdist(spe.challenge, method = &quot;gower&quot;)) "],["regroupement.html", "Chapitre 11 Regroupement 11.1 Regroupement agglomératif à lien unique 11.2 Regroupement agglomératif à liens complets 11.3 Méthode des groupes de paires non pondérés avec moyenne arithmétique (UPGMA) 11.4 Méthode des groupes de paires pondérés avec moyenne arithmétique (WPGMA) 11.5 Variance minimale de Ward 11.6 Décider des points de coupure 11.7 Jouer avec des données réelles : les données sur les espèces de poissons du Doubs", " Chapitre 11 Regroupement L’une des applications des matrices d’association est le regroupement. Le regroupement met en évidence les structures des données en partitionnant soit les objets, soit les descripteurs. Les objets similaires sont ainsi combinés en groupes, ce qui permet d’identifier les distinctions - ou les contrastes - entre les groupes. L’un des objectifs des écologistes pourrait être de diviser un ensemble de sites en groupes en fonction de leurs conditions environnementales ou de la composition de leur communauté. Les résultats des regroupements sont souvent représentés sous forme de dendrogrammes (arbres), où les objets s’agglomèrent en groupes. Il existe plusieurs familles de méthodes de regroupement, mais pour les besoins de cet atelier, nous présenterons une vue d’ensemble de trois méthodes de regroupement agglomératif hiérarchique : le lien simple, le lien complet et le regroupement à variance minimale de Ward. *Voir le chapitre 8 de Legendre et Legendre (2012) pour plus de détails sur les différentes familles de méthodes de clustering. Dans les méthodes hiérarchiques, les éléments des clusters (ou groupes) inférieurs deviennent membres de clusters plus importants, de rang supérieur, par exemple espèce, genre, famille, ordre. Avant de procéder au regroupement, il faut créer une matrice d’association entre les objets. La matrice de distance est le choix par défaut des fonctions de regroupement dans R. La matrice d’association est d’abord triée par ordre de distance croissante (ou de similarités décroissantes). Ensuite, les groupes sont formés hiérarchiquement en suivant des règles spécifiques à chaque méthode. R dispose de plusieurs fonctions intégrées pour le calcul des clusters agglomérés et la visualisation des résultats. Voici quelques-unes des fonctions les plus couramment utilisées : La fonction hclust() du package stats : Cette fonction calcule le regroupement hiérarchique à l’aide d’une variété de méthodes de liaison, y compris la méthode unique, la méthode complète, la méthode moyenne et la méthode de la variance minimale de Ward. La sortie est un objet dendrogramme qui peut être tracé à l’aide de la fonction plot(). La fonction agnes() du paquet cluster : Cette fonction calcule également le clustering hiérarchique en utilisant plusieurs méthodes de liaison, mais elle peut traiter des ensembles de données plus importants que hclust(). La sortie est un objet de la classe “agnes” qui peut être tracé en utilisant la fonction plot(). Le paquet dendextend() : Ce paquet fournit plusieurs fonctions pour manipuler et visualiser les dendrogrammes, y compris color_branches(), rotate() et cutree(). Fonction ggdendro() du paquet ggdendro : Cette fonction crée un dendrogramme en utilisant la syntaxe ggplot2 et offre plus d’options de personnalisation que la fonction de base plot(). Ci-dessous, nous allons apprendre plusieurs types d’algorithmes de clustering, tout en appliquant la fonction la plus simple de R pour les produire, hclust(). 11.1 Regroupement agglomératif à lien unique Le regroupement agglomératif à lien unique est un algorithme de regroupement hiérarchique qui fusionne itérativement les deux groupes les plus proches en fonction de la distance minimale entre leurs membres les plus proches. Les étapes de cet algorithme sont les suivantes Commencez par assigner chaque observation à sa propre grappe. Calculer la distance entre toutes les paires de grappes à l’aide d’une mesure de distance choisie (par exemple, la distance euclidienne). Fusionner les deux grappes les plus proches en une seule grappe. Recalculer la distance entre la nouvelle grappe et toutes les grappes restantes. Répéter les étapes 3 et 4 jusqu’à ce que toutes les observations appartiennent à une seule grappe ou jusqu’à ce qu’un nombre prédéfini de grappes soit atteint. Dans la classification agglomérative à lien unique, la distance entre deux grappes est définie comme la distance minimale entre deux points quelconques des grappes. C’est la raison pour laquelle on l’appelle aussi le “plus proche voisin” ou le “single linkage”. L’un des inconvénients du regroupement agglomératif à lien unique est qu’il peut produire des grappes longues et traînantes qui ne représentent pas des groupes bien définis, également connues sous le nom de phénomène de chaînage. Ce phénomène peut être surmonté en utilisant d’autres critères de liaison tels que la liaison complète, la liaison moyenne ou la liaison de Ward. # générer des échantillons de données set.seed(123) x &lt;- matrix(rnorm(20), ncol = 2) # effectuer un clustering agglomératif à lien unique hc &lt;- hclust(dist(x), method = &quot;single&quot;) # tracer le dendrogramme plot(hc, main = &quot;Dendrogramme du regroupement agglomératif à lien unique&quot;, hang = -1) 11.2 Regroupement agglomératif à liens complets Le regroupement agglomératif à liens complets est un autre algorithme de regroupement hiérarchique qui fusionne itérativement les deux groupes les plus proches sur la base de la distance maximale entre leurs membres les plus éloignés. Les étapes de l’algorithme de regroupement agglomératif à liaison complète sont les suivantes : Commencer par assigner chaque observation à sa propre classe. Calculer la distance entre toutes les paires de groupes à l’aide d’une mesure de distance choisie (par exemple, la distance euclidienne). Fusionner les deux groupes les plus proches en un seul groupe. Recalculer la distance entre la nouvelle grappe et toutes les grappes restantes. Répéter les étapes 3 et 4 jusqu’à ce que toutes les observations appartiennent à une seule grappe ou jusqu’à ce qu’un nombre prédéfini de grappes soit atteint. Dans le cas de la classification agglomérative par liens complets, la distance entre deux grappes est définie comme la distance maximale entre deux points quelconques des grappes. C’est la raison pour laquelle on l’appelle aussi le “plus lointain voisin” ou le “lien complet”. Par rapport au regroupement agglomératif à lien unique, le regroupement à lien complet tend à produire des grappes plus compactes et sphériques, moins sujettes au phénomène de chaînage. Toutefois, il est plus sensible aux valeurs aberrantes et peut produire des grappes déséquilibrées en cas de valeurs extrêmes ou de bruit dans les données. # effectuer un clustering agglomératif à liens complets hc &lt;- hclust(dist(x), method = &quot;complete&quot;) # tracer le dendrogramme plot(hc, main = &quot;Dendrogramme de l&#39;agglomération de liens complète&quot;, hang = -1) 11.3 Méthode des groupes de paires non pondérés avec moyenne arithmétique (UPGMA) Un autre algorithme de regroupement hiérarchique couramment utilisé en bioinformatique et en biologie évolutive est la méthode des groupes de paires non pondérées avec moyenne arithmétique (UPGMA). Les étapes de l’algorithme UPGMA sont les suivantes Commencez par assigner chaque point de données à son propre groupe. Calculer les distances par paire entre tous les groupes sur la base de la métrique de distance choisie, telle que la distance euclidienne, la distance de Manhattan ou la corrélation de Pearson. Trouver les deux grappes les plus proches sur la base des distances par paire et les fusionner en une seule grappe. La distance entre les deux groupes est calculée comme la moyenne des distances par paire entre leurs membres. Mettre à jour les distances par paire entre la nouvelle grappe et toutes les grappes restantes. La distance entre la nouvelle grappe et toute autre grappe est calculée comme la moyenne des distances par paire entre les membres de la nouvelle grappe et les membres de l’autre grappe. Répétez les étapes 3 et 4 jusqu’à ce que tous les points de données appartiennent à un seul groupe. # effectuer un clustering par la méthode des groupes de # paires non pondérés avec moyenne arithmétique hc &lt;- hclust(dist(x), method = &quot;average&quot;) # tracer le dendrogramme plot(hc, main = &quot;Dendrogramme de la méthode du groupe de paires non pondéré avec la moyenne arithmétique \\nAgglomerative Clustering&quot;, hang = -1) L’algorithme UPGMA suppose un taux d’évolution constant et est donc souvent utilisé pour construire des arbres phylogénétiques à partir de données génétiques ou moléculaires. Le résultat de l’algorithme UPGMA est un dendrogramme, qui montre la structure hiérarchique des groupes. Une des limites de l’UPGMA est qu’elle peut être sensible aux valeurs aberrantes et qu’elle peut produire des résultats biaisés s’il existe des modèles non aléatoires de données manquantes ou d’évolution convergente. En outre, il s’agit d’une méthode non pondérée, ce qui signifie qu’elle suppose que tous les points de données ont la même importance, ce qui n’est pas toujours le cas. 11.4 Méthode des groupes de paires pondérés avec moyenne arithmétique (WPGMA) La méthode des groupes de paires pondérés avec moyenne arithmétique (WPGMA) est similaire à la méthode UPGMA, mais elle prend en compte le poids des observations (par exemple, lorsque certaines observations sont plus importantes que d’autres). L’algorithme fonctionne comme suit Commencez par assigner chaque point de données à sa propre grappe. Calculer les distances par paire entre tous les groupes sur la base de la métrique de distance choisie, telle que la distance euclidienne, la distance de Manhattan ou la corrélation de Pearson. Trouver les deux grappes les plus proches sur la base des distances par paire et les fusionner en une seule grappe. La distance entre les deux grappes est calculée comme la moyenne des distances par paire entre leurs membres, pondérées par leurs poids respectifs. Mettre à jour les distances par paire entre la nouvelle grappe et toutes les grappes restantes. La distance entre la nouvelle grappe et toute autre grappe est calculée comme la moyenne des distances par paire entre les membres de la nouvelle grappe et les membres de l’autre grappe, pondérées par leurs poids respectifs. Répétez les étapes 3 et 4 jusqu’à ce que tous les points de données appartiennent à un seul groupe. # exécuter la méthode des groupes de paires pondérés avec # la moyenne arithmétique du clustering hc &lt;- hclust(dist(x), method = &quot;mcquitty&quot;) # trace le dendrogramme plot(hc, main = &quot;Dendrogramme de la méthode des groupes de paires pondérées avec le clustering agglomératif à moyenne arithmétique&quot;, hang = -1) 11.5 Variance minimale de Ward La méthode de variance minimale de Ward est un algorithme de regroupement hiérarchique qui vise à minimiser la variance au sein de chaque groupe en fusionnant les groupes qui minimisent l’augmentation de la somme totale des distances au carré. L’algorithme fonctionne comme suit Commencez par assigner chaque point de données à sa propre grappe. Calculer la distance entre chaque paire de grappes à l’aide d’une mesure de distance choisie, telle que la distance euclidienne ou la distance de Manhattan. Fusionnez les deux grappes qui minimisent l’augmentation de la somme totale des distances au carré. L’augmentation de la somme des distances quadratiques est calculée comme la somme des distances quadratiques à l’intérieur de chaque grappe plus la distance quadratique entre les centroïdes des deux grappes multipliée par le nombre de points de données dans chaque grappe. Calculer la distance entre la nouvelle grappe et toutes les grappes restantes à l’aide de la métrique de distance choisie. Répétez les étapes 3 et 4 jusqu’à ce que tous les points de données appartiennent à une seule grappe. La méthode de Ward est souvent préférée lorsque les données contiennent des grappes de tailles et de densités différentes. Le résultat de la méthode de Ward est un dendrogramme qui montre la structure hiérarchique des grappes. La méthode de Ward est sensible aux valeurs aberrantes et peut produire des résultats biaisés si les données manquantes ne sont pas aléatoires ou si les hypothèses sous-jacentes de normalité et d’égalité des variances ne sont pas respectées. La méthode de la variance minimale de Ward peut être formulée de différentes manières, ce qui donne lieu à des variantes connues sous les noms de Ward D et Ward D2. Ward D utilise la somme des distances au carré comme critère à minimiser lors de la fusion des grappes, ce qui équivaut à minimiser l’augmentation de la somme des écarts au carré par rapport à la moyenne de la grappe combinée. # effectuer le regroupement à variance minimale de Ward hc &lt;- hclust(dist(x), method = &quot;ward.D&quot;) # tracer le dendrogramme plot(hc, main = &quot;Dendrogramme de \\nWard&#39;s minimum variance Agglomerative Clustering&quot;, hang = -1) D’autre part, Ward D2 utilise la somme des écarts quadratiques par rapport au centroïde comme critère à minimiser lors de la fusion des grappes, ce qui équivaut à minimiser l’augmentation de la somme des écarts quadratiques par rapport au centroïde de la grappe combinée. # effectuer le regroupement à variance minimale de Ward hc &lt;- hclust(dist(x), method = &quot;ward.D2&quot;) # tracer le dendrogramme plot(hc, main = &quot;Dendrogramme de \\nWard&#39;s D2 minimum variance Agglomerative Clustering&quot;, hang = -1) En d’autres termes, Ward D2 prend en compte la distance entre les centroïdes des grappes fusionnées, tandis que Ward D prend en compte la distance entre les points de données individuels et la moyenne de la grappe fusionnée. Empiriquement, Ward D2 tend à produire des grappes plus compactes et sphériques, tandis que Ward D peut être plus sensible aux valeurs aberrantes et peut produire des grappes allongées ou de forme irrégulière. Toutefois, le choix de Ward D ou Ward D2 peut dépendre des caractéristiques spécifiques des données et de la question de recherche. 11.6 Décider des points de coupure Le choix du point de coupure pour la prise en compte des groupes de grappes est une étape importante de l’analyse hiérarchique par grappes. Le point de coupure détermine le nombre de grappes à prendre en compte et peut avoir un impact significatif sur l’interprétation des résultats. Voici quelques méthodes courantes pour déterminer le point de coupure : Inspection visuelle du dendrogramme : Une approche consiste à inspecter visuellement le dendrogramme et à identifier un point où les branches commencent à devenir longues et clairsemées. Ce point représente un point de rupture naturel dans la hiérarchie et peut être utilisé comme point de coupure. La méthode du coude : La méthode du coude consiste à tracer une mesure de la qualité des grappes, telle que la somme des carrés à l’intérieur d’une grappe, en fonction du nombre de grappes. Le point où le tracé commence à se stabiliser est considéré comme le point d’inflexion et peut être utilisé comme point de coupure. Statistique de l’écart : la statistique de l’écart compare la somme des carrés à l’intérieur des grappes pour les données réelles à la somme des carrés à l’intérieur des grappes attendue pour une distribution de référence nulle. Le nombre optimal de grappes est celui qui présente la statistique d’écart la plus élevée. Connaissances spécifiques au domaine : Dans certains cas, des connaissances spécifiques au domaine ou des recherches antérieures peuvent fournir des indications sur le nombre approprié de grappes à considérer. 11.7 Jouer avec des données réelles : les données sur les espèces de poissons du Doubs Comparons les méthodes de clustering à lien unique et à lien complet en utilisant les données sur les espèces de poissons du Doubs. Les données sur les espèces ont déjà été transformées par Hellinger. L’analyse de cluster nécessitant des indices de similarité ou de dissimilarité, la première étape consistera à générer les indices de distance de Hellinger. # Génère la matrice de distance à partir des données # transformées de Hellinger spe.dhel &lt;- vegdist(spe.hel, method = &quot;euclidean&quot;) # Voir la différence entre les deux matrices head(spe.hel) # Données d&#39;espèces transformées par Hellinger ## CHA TRU VAI LOC OMB BLA HOT TOX VAN CHE BAR SPI ## 1 0 1.0000000 0.0000000 0.0000000 0 0 0 0 0.0000000 0.0000000 0 0 ## 2 0 0.6454972 0.5773503 0.5000000 0 0 0 0 0.0000000 0.0000000 0 0 ## 3 0 0.5590170 0.5590170 0.5590170 0 0 0 0 0.0000000 0.0000000 0 0 ## 4 0 0.4364358 0.4879500 0.4879500 0 0 0 0 0.0000000 0.2182179 0 0 ## 5 0 0.2425356 0.2970443 0.2425356 0 0 0 0 0.3834825 0.2425356 0 0 ## 6 0 0.3779645 0.4364358 0.4879500 0 0 0 0 0.2182179 0.3086067 0 0 ## GOU BRO PER BOU PSO ROT CAR TAN BCO PCH GRE ## 1 0.0000000 0.0000000 0.0000000 0 0 0.0000000 0 0.0000000 0 0 0 ## 2 0.0000000 0.0000000 0.0000000 0 0 0.0000000 0 0.0000000 0 0 0 ## 3 0.0000000 0.2500000 0.0000000 0 0 0.0000000 0 0.0000000 0 0 0 ## 4 0.2182179 0.3086067 0.3086067 0 0 0.0000000 0 0.2182179 0 0 0 ## 5 0.2425356 0.3429972 0.3429972 0 0 0.2425356 0 0.2970443 0 0 0 ## 6 0.2182179 0.2182179 0.2182179 0 0 0.0000000 0 0.3086067 0 0 0 ## GAR BBO ABL ANG ## 1 0.0000000 0 0 0 ## 2 0.0000000 0 0 0 ## 3 0.0000000 0 0 0 ## 4 0.0000000 0 0 0 ## 5 0.3834825 0 0 0 ## 6 0.2182179 0 0 0 head(spe.dhel) # distances de Hellinger entre les sites ## [1] 0.8420247 0.9391305 1.0616631 1.2308244 1.1153793 0.9391305 Utilisez hclust() pour calculer les algorithmes de regroupement de liens simples et complets pour ces données : spe.dhel.single &lt;- hclust(spe.dhel, method = &quot;single&quot;) plot(spe.dhel.single) spe.dhel.complete &lt;- hclust(spe.dhel, method = &quot;complete&quot;) plot(spe.dhel.complete) Y a-t-il de grandes différences entre les deux dendrogrammes ? Dans le clustering à lien unique, des chaînes d’objets apparaissent (par exemple 19, 29, 30, 20, 26, etc.), alors que des groupes plus contrastés sont formés dans le clustering à lien complet. Là encore, il est possible de générer un regroupement à variance minimale de Ward avec hclust(). Cependant, le dendogramme montre les distances au carré par défaut. Afin de comparer ce dendrogramme aux résultats des regroupements par liens simples et complets, il faut calculer la racine carrée des distances. # Effectuer le clustering de variance minimale de Ward spe.dhel.ward &lt;- hclust(spe.dhel, method = &quot;ward.D2&quot;) plot(spe.dhel.ward) # Reprendre le dendrogramme en utilisant les racines # carrées des niveaux de fusion spe.dhel.ward$height &lt;- sqrt(spe.dhel.ward$height) plot(spe.dhel.ward) plot(spe.dhel.ward, hang = -1) # hang=-1 aligne tous les objets sur la même ligne Il faut être prudent dans le choix d’une mesure d’association et d’une méthode de regroupement afin de traiter correctement un problème. Qu’est-ce qui vous intéresse le plus : les gradients ? les contrastes entre les objets ? En outre, les résultats doivent être interprétés en fonction des propriétés de la méthode utilisée. Si plusieurs méthodes semblent adaptées à une question écologique, il convient de les calculer toutes et de comparer les résultats. Pour rappel, le clustering n’est pas une méthode statistique, mais d’autres mesures peuvent être prises pour identifier des clusters interprétatifs (par exemple, où couper l’arbre), ou pour calculer des statistiques de clustering. Le regroupement peut également être combiné à l’ordination afin de distinguer des groupes de sites. Cela dépasse le cadre de cet atelier, mais voir Borcard et al. 2011 pour plus de détails. Nous allons maintenant nous intéresser aux méthodes d’ordination. L’ordination est une méthode utilisée pour visualiser et explorer les relations entre les variables ou les observations dans un ensemble de données multivariées. L’objectif de l’ordination est de représenter les données dans un espace de dimension inférieure, tel qu’un graphique bidimensionnel ou tridimensionnel, tout en préservant la structure globale des données. L’ordination peut être utilisée pour explorer les modèles et les relations entre les variables ou les observations, pour identifier les variables ou les modèles importants dans les données, ou pour visualiser les résultats d’autres analyses. Le premier groupe de méthodes d’ordination que nous allons étudier est celui des ordinations sans contrainte. "],["que-signifie-sans-contrainte.html", "Chapitre 12 Que signifie “sans contrainte” ?", " Chapitre 12 Que signifie “sans contrainte” ? Les méthodes d’ordination sans contrainte sont des techniques multivariées utilisées pour visualiser et explorer les relations entre les variables ou les observations d’un ensemble de données sans imposer de contraintes spécifiques sur ces relations. Ces méthodes sont appelées “sans contrainte” parce qu’elles ne nécessitent pas de connaissances préalables ou d’hypothèses sur la structure des données ou les relations entre les variables. Les méthodes d’ordination sans contrainte consistent à représenter les variables ou les observations dans un espace de dimension inférieure, tel qu’un graphique bidimensionnel ou tridimensionnel, tout en préservant la structure globale des données. Parmi les méthodes d’ordination sans contrainte les plus courantes figurent l’analyse en composantes principales (ACP), l’analyse des correspondances (AC) et la mise à l’échelle multidimensionnelle (MDS). Ces méthodes peuvent être appliquées à un large éventail de données écologiques, y compris les données sur l’abondance des espèces, les données environnementales et les matrices de similarité des communautés. Dans l’ensemble, les méthodes d’ordination sans contrainte sont largement utilisées en écologie pour explorer les modèles et les relations entre les communautés biologiques et les variables environnementales. Ces méthodes sont des outils précieux pour identifier les facteurs clés qui influencent la composition et la structure des communautés, et pour élaborer des hypothèses sur les processus écologiques sous-jacents qui déterminent ces schémas. "],["analyse-en-composantes-principales.html", "Chapitre 13 Analyse en composantes principales 13.1 L’analyse en composantes principales pas en bref 13.2 Analyse en composantes principales à l’aide des fonctions du paquet 13.3 Analyse en composantes principales sur des données écologiques 13.4 Condenser les données avec l’analyse en composantes principales 13.5 Échelonnement 13.6 Défi #2", " Chapitre 13 Analyse en composantes principales L’analyse en composantes principales (ACP) est une technique statistique utilisée pour réduire la dimensionnalité d’un ensemble de données tout en conservant la majeure partie de sa variabilité. variabilité. Il s’agit d’une méthode de transformation linéaire qui convertit l’ensemble de variables d’origine en un nouvel ensemble de variables linéairement non corrélées. l’ensemble original de variables en un nouvel ensemble de variables linéairement non corrélées, appelées linéairement non corrélées, appelées composantes principales (CP), qui sont classées par ordre décroissant de variance. par ordre décroissant de variance. L’ACP a été introduite pour la première fois par Karl Pearson en 1901, qui a développé les fondements mathématiques de la méthode. les fondements mathématiques de la méthode. Plus tard, Harold Hotelling (1933) a fourni une interprétation plus détaillée et plus moderne de la méthode ACP. L’ACP est devenue l’une des techniques les plus utilisées dans l’analyse des données données en raison de sa capacité à identifier des modèles cachés et à réduire la complexité des données à haute dimension. En substance, l’ACP vise à trouver les combinaisons linéaires des variables qui représentent la plus grande quantité possible de variation dans l’ensemble l’ensemble des données. Les composantes principales qui en résultent sont orthogonales les unes par rapport aux autres, ce qui signifie qu’elles ne sont pas corrélées entre elles. orthogonales, ce qui signifie qu’elles ne sont pas corrélées. leur importance dans l’explication de la variabilité des données. Pour vous familiariser avec l’ACP, nous allons suivre des exemples détaillés sur la façon de l’exécuter étape par étape. comment l’effectuer étape par étape, puis nous utiliserons les fonctions des paquets R pour la réaliser. 13.1 L’analyse en composantes principales pas en bref Supposons que nous ayons un ensemble de données avec \\(n\\) observations et \\(p\\) variables représentées par une matrice n x p \\(X\\). L’objectif de l’ACP est de transformer cet ensemble de en un nouvel ensemble de \\(p\\) variables non corrélées, appelées composantes principales composantes principales (CP), qui capturent le maximum de variance dans les données originales. données originales. 13.1.0.1 Charger les données Dans cet atelier, nous utilisons le jeu de données data(varechem), qui contient des des mesures des propriétés chimiques de 18 échantillons de sol provenant d’une d’une expérience sur le terrain. Nous sélectionnerons les deux premières variables : # Chargement du paquet datasets library(datasets) # Charger le jeu de données varechem data(varechem) # Sélectionner les données (data &lt;- varechem[, 1:2]) ## N P ## 18 19.8 42.1 ## 15 13.4 39.1 ## 24 20.2 67.7 ## 27 20.6 60.8 ## 23 23.8 54.5 ## 19 22.8 40.9 ## 22 26.6 36.7 ## 16 24.2 31.0 ## 28 29.8 73.5 ## 13 28.1 40.5 ## 14 21.8 38.1 ## 20 26.2 61.9 ## 25 22.8 50.6 ## 7 30.5 24.6 ## 5 33.1 22.7 ## 6 19.1 26.4 ## 3 31.1 32.3 ## 4 18.0 64.9 ## 2 22.3 47.4 ## 9 15.0 48.4 ## 12 16.0 32.7 ## 10 14.3 62.8 ## 11 16.7 55.8 ## 21 21.0 26.5 13.1.0.2 Normaliser les données Nous devons d’abord normaliser les données pour qu’elles aient une moyenne nulle et une variance unitaire : \\[ Z_{ij} = \\frac{X_{ij} - \\bar{X_j}}{s_j} \\] où Z est la matrice standardisée, X est la matrice originale, \\(\\bar{X_j}\\) est la moyenne de la variable j, et \\(s_j\\) est l’écart-type de la variable j. data_std &lt;- scale(data) 13.1.0.3 Calculer la matrice de covariance Ensuite, nous calculons la matrice de covariance de \\(Z\\) : \\[ C = \\frac{1}{n-1}ZZ^T \\] où \\(C\\) est la matrice de covariance et \\(T\\) représente l’opération de transposition. La matrice de covariance est une matrice symétrique qui représente les covariances par paire entre les variables. La formule de la covariance entre deux variables \\(X\\) et \\(Y\\) est la suivante : \\[\\text{Cov}(X,Y) = \\frac{1}{n-1}\\sum_{i=1}^{n}(X_i - \\bar{X})(Y_i - \\bar{Y})\\] où \\(n\\) est la taille de l’échantillon, \\(X_i\\) et \\(Y_i\\) sont les valeurs des variables pour l’observation $i$, et \\(\\bar{X}\\) et \\(\\bar{Y}\\) sont les moyennes de l’échantillon des variables. cov_matrix &lt;- cov(data_std) 13.1.0.4 Effectuer la décomposition en valeurs propres de la matrice de covariance Ensuite, nous calculons les valeurs propres et les vecteurs propres de \\(C\\) : \\[ Cv = \\lambda v \\] où \\(C\\) est la matrice de covariance, \\(v\\) est le vecteur propre et \\(\\lambda\\) est la valeur propre correspondante. eigen_decomp &lt;- eigen(cov_matrix) Eigenvalues &lt;- eigen_decomp$values Eigenvectors &lt;- eigen_decomp$vectors Les vecteurs propres représentent les directions dans l’espace à \\(p\\) dimensions qui capturent le maximum de variance dans les données, et les valeurs propres indiquent la quantité de variance capturée par chaque vecteur propre. 13.1.0.5 Projeter les données normalisées sur l’espace des valeurs propres Enfin, nous projetons la matrice de données normalisées \\(Z\\) sur les nouveaux vecteurs de base pour obtenir les composantes principales. Ici, nous calculons les scores des composantes principales en multipliant les données normalisées par les vecteurs propres de toutes les composantes principales : \\[ Y = ZV \\] où \\(Y\\) est la matrice des données transformées et \\(V\\) est la matrice des vecteurs propres. F_PrComps &lt;- data_std %*% Eigenvectors head(F_PrComps) ## [,1] [,2] ## 18 0.1894957 0.4713816 ## 15 0.8662023 1.4319452 ## 24 1.3494546 -0.7909067 ## 27 0.9718543 -0.5156358 ## 23 0.2644868 -0.6269034 ## 19 -0.2510109 0.1444178 La matrice de score, \\(F\\), (objet F_PrComps) permet de rotationner le nouvel espace de données, de sorte qu’il soit représenté par rapport aux composantes principales. Par exemple, voir la figure ci-dessous : Figure 13.1: Relation entre N et P à partir de l’ensemble de données varechem. Les lignes diagonales violette et orange représentent respectivement la première et la deuxième composante principale. Les lignes violettes indiquent les résidus entre le point de données et la première composante principale, tandis que les lignes orange segmentées indiquent la distance entre les points et la deuxième composante principale. Les flèches indiquent les valeurs propres (direction) de l’analyse en composantes principales effectuée sur ces deux variables. Figure 13.2: Relation entre PC1 et PC2 de l’analyse en composantes principales effectuée sur les variables P et N de l’ensemble de données varechem. Les lignes violettes et orange représentent respectivement la première et la deuxième composante principale. Les lignes violettes indiquent les résidus entre le point de données et la première composante principale, tandis que les lignes orange segmentées indiquent la distance entre les points et la deuxième composante principale. 13.2 Analyse en composantes principales à l’aide des fonctions du paquet L’ACP peut également être calculée en utilisant les fonctions stats::prcomp(), stats::princomp(), vegan::rda(), et ade4::dudi.pca(). En résumé, voici ce que nous avons fait : data(varechem) Y &lt;- varechem[, 1:2] Y_std &lt;- as.matrix(scale(Y)) Y_R &lt;- cov(Y_std) Eigenvalues &lt;- eigen(Y_R)$values Eigenvectors &lt;- eigen(Y_R)$vectors F_PrComps &lt;- Y_std %*% Eigenvectors head(F_PrComps) ## [,1] [,2] ## 18 0.1894957 0.4713816 ## 15 0.8662023 1.4319452 ## 24 1.3494546 -0.7909067 ## 27 0.9718543 -0.5156358 ## 23 0.2644868 -0.6269034 ## 19 -0.2510109 0.1444178 Comment cela se compare-t-il à stats::prcomp() ? PCA_prcomp &lt;- prcomp(Y, center = TRUE, scale = TRUE) # or PCA_prcomp &lt;- prcomp(Y_std) head(PCA_prcomp$x) ## PC1 PC2 ## 18 -0.1894957 -0.4713816 ## 15 -0.8662023 -1.4319452 ## 24 -1.3494546 0.7909067 ## 27 -0.9718543 0.5156358 ## 23 -0.2644868 0.6269034 ## 19 0.2510109 -0.1444178 Et quelle est la comparaison avec stats::princomp() ? PCA_princomp &lt;- princomp(Y_std) head(PCA_princomp$scores) ## Comp.1 Comp.2 ## 18 -0.1894957 -0.4713816 ## 15 -0.8662023 -1.4319452 ## 24 -1.3494546 0.7909067 ## 27 -0.9718543 0.5156358 ## 23 -0.2644868 0.6269034 ## 19 0.2510109 -0.1444178 Et avec vegan::rda()? PCA_vegan_rda &lt;- rda(Y_std) scores(PCA_vegan_rda, display = &quot;sites&quot;, scaling = 1, choices = seq_len(PCA_vegan_rda$CA$rank), const = sqrt(PCA_vegan_rda$tot.chi * (nrow(PCA_vegan_rda$CA$u) - 1)))[1:5, ] ## PC1 PC2 ## 18 -0.1894957 -0.4713816 ## 15 -0.8662023 -1.4319452 ## 24 -1.3494546 0.7909067 ## 27 -0.9718543 0.5156358 ## 23 -0.2644868 0.6269034 vegan::rda() est un peu spéciale. Elle utilise des échelles alternatives. Nous ne les aborderons pas ici, mais vous pouvez étudier la vignette(\"decision-vegan\"). 13.3 Analyse en composantes principales sur des données écologiques Nous avons mis en œuvre l’ACP sur un ensemble de données à deux variables, pour des raisons de simplicité. Avançons et appliquons-la à notre jeu de données sur les espèces de poissons. Pour cela, nous allons utiliser la fonction vegan::rda() sur les données de poissons transformées par Hellinger et résumer les résultats : spe.h.pca &lt;- rda(spe.hel) # summary(spe.h.pca) Les premières lignes de summary.rda() nous renseignent sur la variance totale et la variance non contrainte de notre modèle. ``{r echo=FALSE} paste(capture.output(summary(spe.h.pca))[5:8]) ``{r echo=FALSE} paste(capture.output(summary(spe.h.pca))[c(12:16, 21:24)]) Viennent ensuite les valeurs propres et leur contribution à la variance. En fait, si nous additionnons toutes nos valeurs propres, nous obtiendrons la quantité de variance non contrainte expliquée par l’analyse ! sum(spe.h.pca$CA$eig) ## [1] 0.5023429 Les informations suivantes sont liées à l’échelle, aux scores d’espèces et aux scores de sites. ## [1] &quot;Eigenvalue 0.0004263 0.0002812 0.0002188 0.0001382 0.0000876&quot; ## [2] &quot;Proportion Explained 0.0008487 0.0005598 0.0004356 0.0002752 0.0001744&quot; ## [3] &quot;Cumulative Proportion 0.9984010 0.9989608 0.9993965 0.9996717 0.9998460&quot; ## [4] &quot; PC25 PC26 PC27&quot; ## [5] &quot;Proportion Explained 1.062e-04 2.938e-05 1.835e-05&quot; ## [6] &quot;Cumulative Proportion 1.000e+00 1.000e+00 1.000e+00&quot; ## [7] &quot;Scaling 2 for species and site scores&quot; ## [8] &quot;* Species are scaled proportional to eigenvalues&quot; ## [9] &quot;* Sites are unscaled: weighted dispersion equal on all dimensions&quot; ## [10] &quot;* General scaling constant of scores: 1.953663 &quot; ## [11] &quot;&quot; ## [12] &quot;&quot; ## [13] &quot;Species scores&quot; ## [14] &quot;BCO -0.20055 0.08332 -0.074787 -0.0504875 0.073890 0.0249842&quot; ## [15] &quot;PCH -0.14626 0.05268 -0.072012 -0.0432572 0.050318 0.0178776&quot; ## [16] &quot;GAR -0.35085 -0.09353 0.198664 0.0178669 0.023796 -0.0971362&quot; ## [17] &quot;BBO -0.24167 0.03598 -0.079528 -0.0339049 0.096690 0.0620979&quot; ## [18] &quot;ABL -0.42269 -0.22879 0.007158 0.1128353 0.006759 0.1248913&quot; ## [19] &quot;ANG -0.20521 0.11557 -0.072060 -0.0159902 0.072030 -0.0003801&quot; ## [20] &quot;&quot; ## [21] &quot;&quot; ## [22] &quot;Site scores (weighted sums of species scores)&quot; Les espèces font référence à vos descripteurs (c’est-à-dire les colonnes de votre jeu de données), qui sont ici les espèces de poissons. Les scores font référence à la position de chaque espèce le long des composantes principales. ## [1] &quot;Cumulative Proportion 1.000e+00 1.000e+00 1.000e+00&quot; ## [2] &quot;Scaling 2 for species and site scores&quot; ## [3] &quot;* Species are scaled proportional to eigenvalues&quot; ## [4] &quot;* Sites are unscaled: weighted dispersion equal on all dimensions&quot; ## [5] &quot;* General scaling constant of scores: 1.953663 &quot; ## [6] &quot;&quot; ## [7] &quot;&quot; ## [8] &quot;Species scores&quot; ## [1] &quot;PCH -0.14626 0.05268 -0.072012 -0.0432572 0.050318 0.0178776&quot; ## [2] &quot;GAR -0.35085 -0.09353 0.198664 0.0178669 0.023796 -0.0971362&quot; ## [3] &quot;BBO -0.24167 0.03598 -0.079528 -0.0339049 0.096690 0.0620979&quot; ## [4] &quot;ABL -0.42269 -0.22879 0.007158 0.1128353 0.006759 0.1248913&quot; ## [5] &quot;ANG -0.20521 0.11557 -0.072060 -0.0159902 0.072030 -0.0003801&quot; ## [6] &quot;&quot; ## [7] &quot;&quot; ## [8] &quot;Site scores (weighted sums of species scores)&quot; Sites représente les lignes de votre jeu de données, qui sont ici les différents sites le long de la rivière Doubs. Cette information peut être obtenue avec la fonction score() que nous avons utilisée précédemment : scores(spe.h.pca, display = &quot;species&quot; or &quot;sites&quot;) 13.4 Condenser les données avec l’analyse en composantes principales Ici, nous avons 27 composantes principales. Cependant, nous pouvons appliquer des algorithmes pour sélectionner le plus petit nombre de composantes principales qui rendent encore compte d’une grande variance dans les données. 13.4.0.1 Critère de Kaiser-Guttman Nous pouvons sélectionner les composantes principales qui capturent plus de variance que l’explication moyenne de toutes les composantes principales. Pour ce faire, nous procédons comme suit Extraire les valeurs propres associées aux composantes principales ; Sous-ensemble des valeurs propres supérieures à la valeur propre moyenne : ev &lt;- spe.h.pca$CA$eig # ev[ev &gt; mean(ev)] n &lt;- length(ev) barplot(ev, main = &quot;&quot;, col = &quot;grey&quot;, las = 2) abline(h = mean(ev), col = &quot;red3&quot;, lwd = 2) legend(&quot;topright&quot;, &quot;Average eigenvalue&quot;, lwd = 2, col = &quot;red3&quot;, bty = &quot;n&quot;) 13.4.0.2 Modèle à bâtons rompus Le modèle à bâtons (ou branches) rompus retient les composantes qui expliquent plus de variance que ce que l’on pourrait attendre en divisant aléatoirement la variance en \\(p\\) parties. head(bstick(spe.h.pca)) ## PC1 PC2 PC3 PC4 PC5 PC6 ## 0.07240169 0.05379640 0.04449375 0.03829199 0.03364067 0.02991961 screeplot(spe.h.pca, bstick = TRUE, type = &quot;lines&quot;) 13.5 Échelonnement Il ne nous reste plus qu’à discuter de la mise à l’échelle et à visualiser nos résultats. Pratiquons et calculons une ACP sur les variables environnementales standardisées pour le même ensemble de données. env.pca &lt;- rda(env.z) # summary(env.pca, scaling = 2) Déterminer notre sous-ensemble de valeurs propres et leurs vecteurs propres correspondants : ev &lt;- env.pca$CA$eig ev[ev &gt; mean(ev)] ## PC1 PC2 PC3 ## 5.968749 2.163818 1.065164 Les informations calculées par l’ACP peuvent être représentées par des biplots. Nous pouvons produire un biplot simple et rapide de l’ACP en utilisant la fonction plot() dans la base R. plot(spe.h.pca) biplot() de base R permet une meilleure interprétation. biplot(spe.h.pca) Les flèches sont tracées pour montrer la directionnalité et l’angle des descripteurs dans l’ordination. Les descripteurs situés à 180 degrés les uns des autres sont négativement corrélés ; Les descripteurs situés à 90 degrés les uns des autres ont une corrélation nulle ; Les descripteurs situés à 0 degré les uns des autres sont positivement corrélés. Échelle de type 2 (par défaut) : les distances entre les objets ne sont pas des approximations des distances euclidiennes ; les angles entre les vecteurs des descripteurs (espèces) reflètent leurs corrélations. biplot(spe.h.pca, scaling = 2) Échelle de type 1 : tente de préserver la distance euclidienne (dans l’espace multidimensionnel) entre les objets (sites) : les angles entre les vecteurs des descripteurs (espèces) ne sont pas significatifs. biplot(spe.h.pca, scaling = 1) 13.6 Défi #2 En utilisant tout ce que vous avez appris, calculez une ACP sur les données d’abondance des espèces d’acariens data(mite) Préparez-vous à discuter et à répondre : Quelles sont les composantes principales les plus pertinentes, c’est-à-dire les sous-ensembles ? Quels groupes de sites pouvez-vous identifier ? Quels groupes d’espèces sont liés à ces groupes de sites ? Défi 2 - Solution Votre code ressemble probablement à ce qui suit. Calculer l’ACP sur les données d’espèces transformées par Hellinger mite.spe.hel &lt;- decostand(mite, method = &quot;hellinger&quot;) mite.spe.h.pca &lt;- rda(mite.spe.hel) Appliquer le critère de Kaiser-Guttman ev &lt;- mite.spe.h.pca$CA$eig ev[ev &gt; mean(ev)] n &lt;- length(ev) barplot(ev, main = &quot;Valeurs propres&quot;, col = &quot;grey&quot;, las = 2) abline(h = mean(ev), col = &quot;red3&quot;, lwd = 2) legend(&quot;topright&quot;, &quot;Valeur propre moyenne&quot;, lwd = 2, col = &quot;red3&quot;, bty = &quot;n&quot;) biplot(mite.spe.h.pca, col = c(&quot;red3&quot;, &quot;grey15&quot;)) "],["analyse-des-correpondances.html", "Chapitre 14 Analyse des Correpondances", " Chapitre 14 Analyse des Correpondances L’une des hypothèses clefs de la PCA postule que les espèces sont liées les unes aux autres de façon linéaire, et qu’elles répondent de façon linéaire aux gradients écologiques. Ce n’est cependant pas nécessairement le cas dans les données écologiques (e.g. beaucoup d’espèces montrent en effet un distribution unimodale le long des gradients environnementaux). Utiliser une PCA avec des données contenant des espèces à distribution unimodale, ou un grand nombre de zéros (absence des espèces), peut conduire à un phénomène statistique appelé \"horseshoe effect\" (ou effet fer à cheval) se produisant le long de gradients écologiques. Dans de tels cas, l’Analyse des Correspondances (CA) permet de mieux représenter les données (voir Legendre et Legendre pour plus d’informations). Comme la CA préserve les distances de Chi2 entre objets (tandis que la PCA préserve les distances euclidiennes), cette technique est, en effet, plus appropriée pour ordonner les jeux de données contenant des espèces à distribution unimodale, et a, pendant longtemps, était l’une des techniques les plus employées pour analyser les données d’absence-présence ou d’abondances d’espèces. Lors d’une CA, les données brutes sont d’abord transformées en une matrice Q des contributions cellule-par-cellule à la statistique Chi2 de Pearson, puis la matrice résultante est soumise à une décomposition en valeurs singulières afin de calculer les valeurs propres et vecteurs propres de l’ordination. Le résultat d’une CA représente donc une ordination dans laquelle les distances de Chi2 entre objets sont préservées (au lieu de la distance euclidienne dans une PCA), le distance de Chi2 n’étant pas influencée par la présence de double-zéros. Ainsi, la CA constitue une méthode d’ordination puissante pour l’analyse des abondances brutes d’espèces (i.e. sans pré-transformation). Contrairement à la PCA, la CA peut être appliquée sur des données quantitatives ou binaires (telles que des abondance ou absence-présence d’espèces). Comme dans une PCA, le critère de Kaiser-Guttman peut être utilisé pour identifier les axes significatifs d’une CA, et les scores des objets le long des axes d’ordination peuvent être extraits pour être utlisés dans des régressions multiples par exemple. Exécuter une CA sur les données d’abondance d’espèces: # Effectuer une CA à l&#39;aide de la fonction cca() (NB: cca() # est utilisée à la fois pour les CA et CCA) spe.ca &lt;- cca(spe[-8, ]) # Identifier les axes significatifs ev &lt;- spe.ca$CA$eig ev[ev &gt; mean(ev)] ## CA1 CA2 CA3 CA4 CA5 ## 0.60099264 0.14437089 0.10729384 0.08337321 0.05157826 n = length(ev) barplot(ev, main = &quot;Eigenvalues&quot;, col = &quot;grey&quot;, las = 2) abline(h = mean(ev), col = &quot;red&quot;) legend(&quot;topright&quot;, &quot;Average eigenvalue&quot;, lwd = 1, col = 2, bty = &quot;n&quot;) D’après cet histogramme, à partir du sixième axe d’ordination CA6, la proportion de variance expliquée diminue sous la proportion moyenne expliquée par l’ensemble des axes. La sortie R de la CA ci-dessous montre également que les cinq premiers axes d’ordination explique une proportion cumulée de variance expliquée de 84.63%. # summary(spe.h.pca) summary(spe.h.pca, diplay=NULL) Les résultats d’une CA sont présentés sous R de la même façon que ceux d’une PCA. On y observe que le premier axe CA1 explique 51.50% de la variation de l’abondance des espèces tandis que le second axe CA2 explique 12.37% de la variation. par(mfrow = c(1, 2)) #### scaling 1 plot(spe.ca, scaling = 1, type = &quot;none&quot;, main = &quot;CA - biplot scaling 1&quot;, xlab = c(&quot;CA1 (%)&quot;, round((spe.ca$CA$eig[1]/sum(spe.ca$CA$eig)) * 100, 2)), ylab = c(&quot;CA2 (%)&quot;, round((spe.ca$CA$eig[2]/sum(spe.ca$CA$eig)) * 100, 2))) points(scores(spe.ca, display = &quot;sites&quot;, choices = c(1, 2), scaling = 1), pch = 21, col = &quot;black&quot;, bg = &quot;steelblue&quot;, cex = 1.2) text(scores(spe.ca, display = &quot;species&quot;, choices = c(1), scaling = 1), scores(spe.ca, display = &quot;species&quot;, choices = c(2), scaling = 1), labels = rownames(scores(spe.ca, display = &quot;species&quot;, scaling = 1)), col = &quot;red&quot;, cex = 0.8) #### scaling 2 plot(spe.ca, scaling = 1, type = &quot;none&quot;, main = &quot;CA - biplot scaling 2&quot;, xlab = c(&quot;CA1 (%)&quot;, round((spe.ca$CA$eig[1]/sum(spe.ca$CA$eig)) * 100, 2)), ylab = c(&quot;CA2 (%)&quot;, round((spe.ca$CA$eig[2]/sum(spe.ca$CA$eig)) * 100, 2)), ylim = c(-2, 3)) points(scores(spe.ca, display = &quot;sites&quot;, choices = c(1, 2), scaling = 2), pch = 21, col = &quot;black&quot;, bg = &quot;steelblue&quot;, cex = 1.2) text(scores(spe.ca, display = &quot;species&quot;, choices = c(1), scaling = 2), scores(spe.ca, display = &quot;species&quot;, choices = c(2), scaling = 2), labels = rownames(scores(spe.ca, display = &quot;species&quot;, scaling = 2)), col = &quot;red&quot;, cex = 0.8) Ces biplots montrent qu’un groupe de sites (à gauche) possède des communautés similaires de poissons caractérisées par de nombreuses espèces dont GAR, TAN, PER, ROT, PSO et CAR; dans le coin supérieur droit, un second groupe de sites se caractérisent par les espèces LOC, VAI et TRU; le dernier groupe de sites dans le coin inférieur droit montrent des communautés abondantes en BLA, CHA et OMB. Défi 4 Exécuter une CA sur les données d’abondance des espèces d’acariens (données mite). Quels sont les axes importants? Quels groupes de sites pouvez-vous identifier? Quelles espèces sont liées à chaque groupe de sites? Défi 4 - Solution Votre code devrait s’apparenter à celui-ci: # CA mite.spe &lt;- mite mite.spe.ca &lt;- cca(mite.spe) # Quels sont les axes importants? ev &lt;- mite.spe.ca$CA$eig ev[ev &gt; mean(ev)] ## CA1 CA2 CA3 CA4 CA5 CA6 CA7 ## 0.52511362 0.22727580 0.17401743 0.12661241 0.08621687 0.07484890 0.06694738 ## CA8 ## 0.05061316 n = length(ev) barplot(ev, main = &quot;Eigenvalues&quot;, col = &quot;grey&quot;, las = 2) abline(h = mean(ev), col = &quot;red&quot;) legend(&quot;topright&quot;, &quot;Average eigenvalue&quot;, lwd = 1, col = 2, bty = &quot;n&quot;) # Résultats summary(mite.spe.ca, display=NULL) # Biplot plot(mite.spe.ca, scaling = 1, type = &quot;none&quot;, xlab = c(&quot;PC1 (%)&quot;, round((mite.spe.ca$CA$eig[1]/sum(mite.spe.ca$CA$eig)) * 100, 2)), ylab = c(&quot;PC2 (%)&quot;, round((mite.spe.ca$CA$eig[2]/sum(mite.spe.ca$CA$eig)) * 100, 2))) points(scores(mite.spe.ca, display = &quot;sites&quot;, choices = c(1, 2), scaling = 1), pch = 21, col = &quot;black&quot;, bg = &quot;steelblue&quot;, cex = 1.2) text(scores(mite.spe.ca, display = &quot;species&quot;, choices = c(1), scaling = 1), scores(mite.spe.ca, display = &quot;species&quot;, choices = c(2), scaling = 1), labels = rownames(scores(mite.spe.ca, display = &quot;species&quot;, scaling = 1)), col = &quot;red&quot;, cex = 0.8) "],["analyse-en-coordonnées-principales.html", "Chapitre 15 Analyse en coordonnées principales", " Chapitre 15 Analyse en coordonnées principales La PCA, comme la CA, impose une préservation des distances entre objets: la distance euclidienne dans le cas de la PCA, et la distance de Chi2 dans la CA. Si l’objectif est d’ordonner les objets sur la base d’une autre mesure de distance plus appropriée au problème, la PCoA constitue une technique de choix. Dans une PCA, les données sont pivotées de façon à ce que la première composante principale (correspondant à une combinaison linéaire des descripteurs) explique la plus forte proportion de variation possible; la contribution de chaque descripteur (espèces ou variables environnementales) à chaque composante principale peut alors être évaluée d’après son score. La PCoA est une seconde méthode d’ordination sans contrainte dans laquelle les points sont ajoutés les uns après les autres à l’espace d’ordination en utilisant la distance euclidienne ou n’importe quelle mesure de distance (dissimilarité) métrique vous choisissez. Un premier point est ainsi placé dans l’espèce d’ordination, puis un second point placé à la valeur de distance du premier, puis un troisième et ainsi de suite en ajoutant autant d’axes (de dimensions) que nécessaire. Il est parfois difficile de choisir entre effectuer une PCA ou une PCoA. La PCA permet toutefois de réduire des données multivariables en un faible nombre de dimensions tandis que la PCoA est utile pour visualiser les distances entre sites (ou objets). La PCoA est aussi particulièrement adaptées pour les jeux de données présentant plus de colonnes que de lignes. Par exemple, si des centaines d’espèces ont été observées dans un petit nombree de quadrats, une approche basée sur une PCoA utilisant la distance de Bray-Curtis (voir ci-dessous) peut être plus adaptée. PCoA avec DoubsSpe (transformé Hellinger): # En utilisant la fonction cmdscale() ?cmdscale # cmdscale(dist(spe.hel), k=(nrow(spe)-1), eig=TRUE) # En utilisant la fonction pcoa() ?pcoa spe.h.pcoa &lt;- pcoa(dist(spe.hel)) # Extraction des résultats spe.h.pcoa ## $correction ## [1] &quot;none&quot; &quot;1&quot; ## ## $note ## [1] &quot;There were no negative eigenvalues. No correction was applied&quot; ## ## $values ## Eigenvalues Relative_eig Broken_stick Cumul_eig Cumul_br_stick ## 1 7.2247719550 4.959363e-01 0.144128028 0.4959363 0.1441280 ## 2 1.9115365901 1.312153e-01 0.107090991 0.6271515 0.2512190 ## 3 1.3384760670 9.187817e-02 0.088572472 0.7190297 0.3397915 ## 4 1.0797364397 7.411728e-02 0.076226793 0.7931470 0.4160183 ## 5 0.6161946090 4.229798e-02 0.066967534 0.8354450 0.4829858 ## 6 0.4820458816 3.308949e-02 0.059560127 0.8685345 0.5425459 ## 7 0.4283230637 2.940175e-02 0.053387287 0.8979362 0.5959332 ## 8 0.3762159586 2.582492e-02 0.048096282 0.9237611 0.6440295 ## 9 0.3056520040 2.098113e-02 0.043466652 0.9447423 0.6874962 ## 10 0.1933000228 1.326886e-02 0.039351426 0.9580111 0.7268476 ## 11 0.1461674552 1.003350e-02 0.035647722 0.9680446 0.7624953 ## 12 0.1234859973 8.476556e-03 0.032280719 0.9765212 0.7947760 ## 13 0.0802304371 5.507327e-03 0.029194299 0.9820285 0.8239703 ## 14 0.0757579222 5.200317e-03 0.026345296 0.9872288 0.8503156 ## 15 0.0436416031 2.995728e-03 0.023699794 0.9902245 0.8740154 ## 16 0.0402292154 2.761489e-03 0.021230658 0.9929860 0.8952461 ## 17 0.0300862815 2.065239e-03 0.018915843 0.9950513 0.9141619 ## 18 0.0226628371 1.555665e-03 0.016737194 0.9966069 0.9308991 ## 19 0.0137723152 9.453849e-04 0.014679581 0.9975523 0.9455787 ## 20 0.0123632307 8.486599e-04 0.012730263 0.9984010 0.9583090 ## 21 0.0081555480 5.598283e-04 0.010878411 0.9989608 0.9691874 ## 22 0.0063464793 4.356469e-04 0.009114743 0.9993965 0.9783021 ## 23 0.0040090171 2.751944e-04 0.007431241 0.9996717 0.9857334 ## 24 0.0025405355 1.743922e-04 0.005820935 0.9998460 0.9915543 ## 25 0.0015475694 1.062311e-04 0.004277725 0.9999523 0.9958320 ## 26 0.0004279456 2.937584e-05 0.002796244 0.9999817 0.9986283 ## 27 0.0002672735 1.834669e-05 0.001371742 1.0000000 1.0000000 ## ## $vectors ## Axis.1 Axis.2 Axis.3 Axis.4 Axis.5 Axis.6 ## 1 -0.510156945 0.34756659 0.603085591 -0.310543265 -0.197553521 -0.221069305 ## 2 -0.697567847 0.04025083 0.104205663 -0.225612118 0.163849922 0.057118813 ## 3 -0.639279415 -0.02078733 0.039889544 -0.263628398 0.130319412 0.111253367 ## 4 -0.411968300 -0.13472113 -0.142902757 -0.290074579 0.003953021 0.070356253 ## 5 0.005052046 -0.09541567 -0.305402114 -0.285298970 -0.319905818 -0.074116109 ## 6 -0.292971968 -0.11423456 -0.318658086 -0.235971751 -0.055670665 -0.023524696 ## 7 -0.606181804 0.01311371 -0.103502900 -0.166666590 0.068994249 0.046616186 ## 8 -0.044277099 0.37855579 0.209803758 -0.041860959 -0.050340441 -0.224811387 ## 9 -0.055398038 0.23770911 -0.554896259 0.035714264 0.245404126 -0.294269844 ## 10 -0.411659370 -0.04289473 -0.334330241 -0.064890540 -0.036668552 0.163955021 ## 11 -0.647448909 0.07241771 0.059230271 0.165765759 0.138217948 0.077220226 ## 12 -0.660227103 0.04063431 0.069626365 0.164694182 0.151045792 0.067901571 ## 13 -0.669989292 -0.02617200 0.254127895 0.296853851 0.020112254 0.039361331 ## 14 -0.514123243 -0.11759191 0.124161107 0.337034089 -0.072737199 0.102923203 ## 15 -0.382456316 -0.18268726 -0.044509503 0.326475994 -0.196934814 0.009434612 ## 16 -0.104612763 -0.34327514 -0.060655999 0.173934966 -0.240560559 -0.196130632 ## 17 0.077182346 -0.31157335 0.004924379 0.223599341 -0.025562246 -0.150291623 ## 18 0.190358561 -0.28346955 -0.003617427 0.210396847 -0.002011505 -0.072026282 ## 19 0.375901506 -0.23662078 -0.085630881 0.044242671 0.070944646 0.008377573 ## 20 0.527629462 -0.15173319 -0.018308764 -0.019944534 0.064702813 -0.003343781 ## 21 0.569870073 -0.16047375 0.065307725 -0.068096992 0.062804974 0.031580390 ## 22 0.617258390 -0.11793174 0.094167103 -0.068833539 0.041405159 -0.002858822 ## 23 0.336055026 0.73592106 -0.204488229 0.227831244 0.025285812 -0.134590432 ## 24 0.497505046 0.55783894 0.004515865 0.162635299 0.089200208 0.187738632 ## 25 0.451988375 0.40277173 -0.125327479 0.012077795 -0.406808027 0.294782035 ## 26 0.614448977 -0.01805379 0.074796024 -0.072007390 0.085588501 0.080433384 ## 27 0.618392379 -0.08429084 0.101059106 -0.072533377 0.073400866 0.025763345 ## 28 0.620954661 -0.08172447 0.118745770 -0.079281887 0.097537821 0.019641919 ## 29 0.495638840 -0.18890154 0.177201163 -0.005346842 0.048466617 0.036178632 ## 30 0.650082728 -0.11422705 0.197383307 -0.110664573 0.023519205 -0.033603580 ## Axis.7 Axis.8 Axis.9 Axis.10 Axis.11 ## 1 0.144778497 -0.108680760 0.18105189 0.042053483 -0.0016587031 ## 2 0.131675051 0.067697769 -0.06442281 0.016322950 0.0766957137 ## 3 0.069666241 0.031770585 -0.18133335 0.054260234 0.1067437960 ## 4 -0.047927061 -0.136480728 -0.13598284 0.106888544 -0.1645322957 ## 5 -0.131095899 -0.174271395 -0.05877177 -0.073981709 0.0131279680 ## 6 -0.021743286 -0.115004262 0.03097933 0.065134857 -0.0476015027 ## 7 0.145272319 0.133736176 0.13596783 -0.071403704 0.0478781210 ## 8 -0.249281692 0.347792146 -0.20431566 -0.019627104 -0.1000657420 ## 9 -0.156249571 -0.036248842 0.08732011 0.069397576 0.0711114885 ## 10 0.053941040 0.277546755 0.15097392 -0.090289879 -0.0627982226 ## 11 -0.075619678 -0.113051884 0.05179123 -0.166515459 -0.0936935628 ## 12 -0.082316286 -0.089474135 0.05531765 -0.101060997 -0.0354555822 ## 13 -0.111861920 -0.051493606 -0.11003492 0.007324915 0.0835976123 ## 14 -0.155831067 -0.084666037 -0.05268442 0.108373540 0.0413567293 ## 15 -0.102805610 0.082457361 0.19458097 0.085700119 0.0295625679 ## 16 0.126867264 0.110495416 0.01963519 0.097451870 0.0123631286 ## 17 0.229852292 -0.022948272 -0.09446251 -0.070757727 -0.0318276098 ## 18 0.171587545 -0.053114138 -0.06502363 -0.053291310 -0.1178208859 ## 19 0.127081334 0.087197011 -0.11829211 0.047993991 0.0835424502 ## 20 0.069016007 0.000460929 -0.04253991 -0.018492619 -0.0139967841 ## 21 -0.009766216 -0.006130571 -0.03271554 -0.023218456 -0.0006656359 ## 22 -0.046128905 0.013506969 0.06301853 0.004431100 -0.0278464929 ## 23 0.159237588 -0.121000025 -0.06538492 -0.086608737 0.0660163262 ## 24 0.131408044 0.004925476 0.04467269 0.198440168 -0.1434962817 ## 25 -0.000769921 0.012976434 -0.06943344 -0.066678460 0.0711120416 ## 26 -0.071425449 -0.028398595 0.05601302 0.050939982 0.0494279711 ## 27 -0.076854712 0.004905405 0.06998558 0.042964922 0.0448326499 ## 28 -0.085841284 0.011954160 0.08869290 -0.008741900 0.0253749009 ## 29 -0.027534472 -0.052600816 0.04462036 -0.026347339 0.0190432434 ## 30 -0.107330191 0.006141473 0.02077662 -0.120662852 -0.0003274070 ## Axis.12 Axis.13 Axis.14 Axis.15 Axis.16 ## 1 -0.016985570 -0.059356684 -0.032259029 0.017751662 -0.032551065 ## 2 -0.040382483 -0.004522773 0.034175345 0.030438784 -0.003470435 ## 3 0.059748365 0.030529406 -0.056369389 -0.030472273 0.023507620 ## 4 0.128113024 0.005672885 0.029024190 0.037726744 -0.016192023 ## 5 -0.142025015 0.027986563 0.044895706 -0.031926925 0.021644656 ## 6 0.002730923 -0.012716449 0.048262228 -0.020739758 0.012986316 ## 7 0.013501670 0.021247503 0.016671866 -0.052330462 0.012911167 ## 8 0.006193487 -0.025282152 0.007970746 -0.025493553 0.011617612 ## 9 -0.038202009 -0.020718941 -0.094846511 0.001390466 -0.054329506 ## 10 0.018135140 0.002582547 0.027579884 0.012535440 -0.057093096 ## 11 -0.045020205 0.026564345 -0.032588078 0.066552203 0.005309144 ## 12 -0.014423939 -0.019722088 -0.073255141 -0.022081383 0.088608382 ## 13 -0.113643929 0.047913574 0.086889725 -0.029669059 -0.023007366 ## 14 0.085753156 -0.024981689 -0.041772099 0.018944140 -0.049571366 ## 15 0.042255905 -0.081698779 0.091913004 0.009632658 0.028317188 ## 16 0.009130686 0.148327119 -0.068359877 0.043569274 0.052496280 ## 17 0.016739286 -0.016572914 0.002677102 -0.048014006 -0.005203501 ## 18 0.014076801 -0.050636202 -0.046206632 -0.074380342 -0.035703891 ## 19 -0.102061060 -0.062317049 0.012286823 0.061776992 -0.020887344 ## 20 -0.043631886 -0.121847295 -0.015523233 0.039146960 0.032396504 ## 21 -0.020855074 -0.020418570 0.023435950 0.064833903 0.017006933 ## 22 0.013713142 0.015947853 0.012667359 0.027584750 0.038980645 ## 23 0.136150259 0.026788223 0.100732248 0.026844661 0.019799830 ## 24 -0.131949957 0.057983455 0.004971150 -0.020944221 0.003456220 ## 25 0.012583227 -0.029467230 -0.104718995 0.001544042 -0.014342105 ## 26 0.029739984 -0.047390015 0.028381466 -0.071868171 0.023492243 ## 27 0.051420190 0.003944216 -0.021284610 -0.021355323 0.038782465 ## 28 0.038056995 0.056857822 -0.012266161 -0.015148328 0.009103088 ## 29 0.019744857 0.066405552 0.020151093 -0.027354925 -0.088766027 ## 30 0.011394031 0.058897769 0.006763871 0.031506050 -0.039298567 ## Axis.17 Axis.18 Axis.19 Axis.20 Axis.21 ## 1 -0.002022009 -0.0114828298 0.016218432 0.001079419 -0.0005019483 ## 2 0.032848263 0.0221283401 -0.033450998 -0.026019257 -0.0339142968 ## 3 -0.041700683 0.0295264894 0.010334071 0.005409936 0.0035999917 ## 4 0.035988011 -0.0254209339 -0.020162069 0.016483289 0.0167710090 ## 5 -0.055721856 0.0037098626 -0.013022444 0.005899574 -0.0164850945 ## 6 0.033956416 0.0087676376 0.050604576 -0.019181658 0.0067963329 ## 7 -0.022284596 -0.0165882742 -0.040039849 0.014046393 0.0363072960 ## 8 -0.010291948 0.0055408227 0.002787075 -0.004392699 0.0024537397 ## 9 0.011778079 -0.0003455269 -0.013508307 -0.001331984 0.0043800067 ## 10 -0.013908033 -0.0135256237 0.037445682 0.004395065 -0.0235946995 ## 11 -0.009826263 0.0703357289 0.002523735 -0.010262220 0.0075908622 ## 12 0.016312674 -0.0721256365 0.014210040 0.010521804 -0.0134186070 ## 13 0.047335815 -0.0161922560 0.009042442 -0.003528424 0.0235887894 ## 14 -0.067022434 -0.0116252988 0.001354905 0.010199583 -0.0219927886 ## 15 0.009364557 0.0263486731 -0.023351454 -0.001296985 0.0094959853 ## 16 0.025964781 0.0104597824 -0.006956306 0.006661384 -0.0094263976 ## 17 -0.020248107 0.0067446767 0.027258460 0.026967756 -0.0015512224 ## 18 0.027093364 0.0072679935 -0.028002826 -0.047328412 -0.0059261451 ## 19 0.009924204 -0.0481308750 0.024850340 -0.004324904 0.0079824875 ## 20 -0.015585863 0.0277501077 -0.013702681 0.047724297 0.0182074195 ## 21 -0.016542963 0.0092821760 0.001480220 -0.025370160 -0.0084429859 ## 22 -0.055684864 -0.0561345635 -0.024796601 -0.040797082 0.0050452392 ## 23 -0.008860634 -0.0069233159 0.004266889 -0.002271375 -0.0054075510 ## 24 -0.018443767 0.0075841409 -0.002515486 0.014595728 -0.0022631488 ## 25 0.040923141 -0.0024101993 -0.007624906 -0.011774119 0.0140077288 ## 26 0.035467099 0.0174345585 -0.010536421 0.019434700 -0.0402246854 ## 27 -0.002288486 0.0406949575 0.041498383 -0.023999144 0.0203703758 ## 28 0.018397048 -0.0095601545 0.008600220 0.001377984 0.0035839658 ## 29 -0.038561698 -0.0001869609 -0.004530281 -0.001379115 0.0121067848 ## 30 0.053640748 -0.0029234986 -0.010274840 0.038460625 -0.0091384433 ## Axis.22 Axis.23 Axis.24 Axis.25 Axis.26 ## 1 0.0014833225 -0.0065787897 0.0025708440 0.0006111797 -6.652485e-04 ## 2 0.0097642374 0.0268452560 -0.0100620960 0.0038976796 2.137164e-03 ## 3 -0.0092776871 -0.0037606885 0.0144658364 -0.0036287070 -6.821978e-03 ## 4 0.0028506107 -0.0027090716 -0.0017569852 0.0057491452 -1.706076e-03 ## 5 0.0136989727 0.0003475077 0.0011424898 -0.0030847372 -2.908802e-03 ## 6 -0.0115349565 0.0047214339 -0.0018803323 -0.0034464820 5.217117e-03 ## 7 -0.0056934775 -0.0093295061 0.0003530511 -0.0072762582 5.329989e-03 ## 8 -0.0008469183 -0.0004881854 -0.0038862115 0.0017875196 -1.512602e-04 ## 9 -0.0074683994 0.0047774096 0.0019637794 0.0029468259 5.485785e-04 ## 10 0.0098644645 -0.0076437028 -0.0018942865 -0.0002971812 3.409468e-04 ## 11 -0.0037986549 -0.0152174925 0.0080735768 0.0096867419 -7.755451e-04 ## 12 -0.0033199047 0.0093492106 -0.0131126832 -0.0028589307 -4.710659e-03 ## 13 0.0039517664 -0.0090423073 -0.0004737194 0.0008766611 4.745572e-03 ## 14 0.0093856775 -0.0005970185 0.0010930490 -0.0090303061 6.734889e-03 ## 15 -0.0063600828 0.0142798563 0.0080190556 0.0001970928 -8.014365e-03 ## 16 0.0006285270 -0.0125371143 -0.0098869078 0.0012568280 7.931333e-04 ## 17 -0.0176256858 0.0250253705 0.0100018862 0.0137503799 3.542893e-03 ## 18 0.0143625846 -0.0098348246 0.0033598507 -0.0120505422 -2.320132e-03 ## 19 0.0015468382 -0.0153852060 0.0067802235 0.0012764314 -6.401490e-03 ## 20 0.0216341197 -0.0019871266 -0.0143405081 -0.0015301558 3.713579e-03 ## 21 -0.0176748102 0.0008238311 -0.0027859661 -0.0083260780 3.104888e-03 ## 22 -0.0158740130 0.0002140067 0.0104861271 0.0093024539 4.263876e-03 ## 23 0.0081132047 -0.0063640810 -0.0031794156 -0.0034469454 -1.325333e-03 ## 24 -0.0038248668 0.0081036968 0.0040210079 -0.0045838875 -9.888835e-04 ## 25 -0.0080154023 0.0073904422 -0.0006747257 0.0067623375 1.688911e-03 ## 26 -0.0155602791 -0.0299232051 -0.0002259646 0.0111009252 1.625749e-03 ## 27 0.0039892822 0.0049533207 -0.0106345438 -0.0087416826 3.701578e-05 ## 28 0.0549447863 0.0095490227 0.0166916073 0.0079819755 3.801458e-04 ## 29 -0.0085946905 0.0042374550 -0.0270118328 0.0085586800 -6.625968e-03 ## 30 -0.0207485655 0.0107805002 0.0127837939 -0.0174409634 -7.887060e-04 ## Axis.27 ## 1 -0.0002438509 ## 2 -0.0016677021 ## 3 0.0045375912 ## 4 -0.0044881420 ## 5 -0.0030365301 ## 6 0.0073731251 ## 7 -0.0023330313 ## 8 0.0005887564 ## 9 -0.0005713160 ## 10 -0.0004645789 ## 11 -0.0009212218 ## 12 0.0005358741 ## 13 0.0003558427 ## 14 -0.0008856661 ## 15 0.0011316764 ## 16 0.0009562223 ## 17 -0.0032726121 ## 18 0.0011084512 ## 19 -0.0028887932 ## 20 0.0044727668 ## 21 0.0012218169 ## 22 0.0016579982 ## 23 0.0005197968 ## 24 -0.0001848745 ## 25 0.0003261856 ## 26 -0.0010766735 ## 27 -0.0091910944 ## 28 0.0024768505 ## 29 0.0035590558 ## 30 0.0004040766 ## ## $trace ## [1] 14.56794 ## ## attr(,&quot;class&quot;) ## [1] &quot;pcoa&quot; # Représentation graphique biplot.pcoa(spe.h.pcoa, spe.hel, dir.axis2 = -1) Vous pouvez aussi exécuter cette PCoA avec une autre mesure de distance (ex. Bray-Curtis): spe.bray.pcoa &lt;- pcoa(spe.db) # il s&#39;agit de la matrice de distances de Bray-Curtis qu&#39;on a générée plus tôt spe.bray.pcoa ## $correction ## [1] &quot;none&quot; &quot;1&quot; ## ## $note ## [1] &quot;No correction was applied to the negative eigenvalues&quot; ## ## $values ## Eigenvalues Relative_eig Rel_corr_eig Broken_stick Cum_corr_eig ## 1 3.695332e+00 4.924914e-01 0.396254705 0.140256109 0.3962547 ## 2 1.197352e+00 1.595758e-01 0.133291315 0.104541823 0.5295460 ## 3 8.465325e-01 1.128207e-01 0.096360364 0.086684680 0.6259064 ## 4 5.253896e-01 7.002074e-02 0.062553505 0.074779918 0.6884599 ## 5 4.147227e-01 5.527173e-02 0.050903553 0.065851347 0.7393634 ## 6 2.977969e-01 3.968856e-02 0.038594722 0.058708489 0.7779582 ## 7 1.913094e-01 2.549655e-02 0.027384732 0.052756109 0.8053429 ## 8 1.554757e-01 2.072086e-02 0.023612504 0.047654068 0.8289554 ## 9 1.307617e-01 1.742712e-02 0.021010850 0.043189782 0.8499663 ## 10 1.272105e-01 1.695385e-02 0.020637021 0.039221528 0.8706033 ## 11 8.550928e-02 1.139616e-02 0.016247110 0.035650099 0.8868504 ## 12 4.357746e-02 5.807740e-03 0.011832929 0.032403346 0.8986833 ## 13 3.862321e-02 5.147468e-03 0.011311393 0.029427156 0.9099947 ## 14 2.727686e-02 3.635295e-03 0.010116958 0.026679903 0.9201117 ## 15 1.303318e-02 1.736984e-03 0.008617519 0.024128883 0.9287292 ## 16 6.704839e-03 8.935804e-04 0.007951331 0.021747930 0.9366805 ## 17 3.817779e-03 5.088104e-04 0.007647409 0.019515787 0.9443279 ## 18 1.300463e-03 1.733178e-04 0.007382410 0.017414947 0.9517103 ## 19 0.000000e+00 0.000000e+00 0.007241723 0.015430820 0.9589521 ## 20 -3.597737e-05 -4.794846e-06 0.006806781 0.013551121 0.9657588 ## 21 -4.167639e-03 -5.554377e-04 0.006301162 0.011765406 0.9720600 ## 22 -8.970687e-03 -1.195559e-03 0.005694152 0.010064726 0.9777541 ## 23 -1.473688e-02 -1.964042e-03 0.005560103 0.008441350 0.9833143 ## 24 -1.601025e-02 -2.133749e-03 0.004966161 0.006888555 0.9882804 ## 25 -2.165231e-02 -2.885689e-03 0.003953426 0.005400459 0.9922338 ## 26 -3.127263e-02 -4.167827e-03 0.003620673 0.003971888 0.9958545 ## 27 -3.443356e-02 -4.589097e-03 0.003284015 0.002598262 0.9991385 ## 28 -3.763160e-02 -5.015311e-03 0.000861473 0.001275510 1.0000000 ## 29 -6.064415e-02 -8.082285e-03 0.000000000 0.000000000 1.0000000 ## 30 -6.882758e-02 -9.172922e-03 0.000000000 0.000000000 1.0000000 ## Cumul_br_stick ## 1 0.1402561 ## 2 0.2447979 ## 3 0.3314826 ## 4 0.4062625 ## 5 0.4721139 ## 6 0.5308224 ## 7 0.5835785 ## 8 0.6312325 ## 9 0.6744223 ## 10 0.7136439 ## 11 0.7492940 ## 12 0.7816973 ## 13 0.8111245 ## 14 0.8378044 ## 15 0.8619332 ## 16 0.8836812 ## 17 0.9031970 ## 18 0.9206119 ## 19 0.9360427 ## 20 0.9495938 ## 21 0.9613593 ## 22 0.9714240 ## 23 0.9798653 ## 24 0.9867539 ## 25 0.9921543 ## 26 0.9961262 ## 27 0.9987245 ## 28 1.0000000 ## 29 1.0000000 ## 30 1.0000000 ## ## $vectors ## Axis.1 Axis.2 Axis.3 Axis.4 Axis.5 ## 1 -0.320449823 0.23306708 0.4052011521 0.413065395 0.015467310 ## 2 -0.502684922 -0.03668632 0.0997686617 0.057953534 0.131243584 ## 3 -0.472042556 -0.07339838 0.0403753966 0.006212226 0.047271525 ## 4 -0.316249689 -0.09691873 -0.0491347038 0.002385678 0.066184200 ## 5 0.066641517 -0.13220277 -0.0390672681 -0.012811215 0.179083299 ## 6 -0.241592757 -0.04199098 -0.1494561573 0.012030513 0.103395863 ## 7 -0.441932409 -0.01314509 -0.0447489079 0.020783790 0.061783592 ## 8 -0.001003178 0.48166769 0.4918540684 -0.484890471 -0.022190458 ## 9 -0.028617328 0.08917429 -0.1852217989 -0.148928771 0.391250238 ## 10 -0.293012598 -0.02300668 -0.1871502897 -0.096313161 0.118272698 ## 11 -0.438723426 0.06823719 0.0580789208 0.147205049 -0.015397336 ## 12 -0.472756087 -0.02746175 -0.0121736070 -0.004845316 -0.034829016 ## 13 -0.475481686 -0.07544948 0.1076846382 -0.002262210 -0.152129112 ## 14 -0.374686608 -0.08941462 -0.0393980393 -0.058453813 -0.201138975 ## 15 -0.243653042 -0.17161666 -0.0604201374 -0.094551547 -0.124766409 ## 16 -0.073434106 -0.19187100 -0.0766719854 -0.084668713 -0.153297850 ## 17 0.040676259 -0.17425458 -0.0875892901 -0.055947030 -0.163426682 ## 18 0.144508662 -0.14874280 -0.1071774823 -0.063043216 -0.123147241 ## 19 0.229660655 -0.14844143 -0.1097826754 -0.072230936 -0.047123653 ## 20 0.401052593 -0.11604102 -0.0002766332 -0.007839228 0.027044314 ## 21 0.438415129 -0.10928733 0.0607616262 0.031524233 0.014274293 ## 22 0.465196276 -0.10586147 0.1107737062 0.036773609 0.034947440 ## 23 0.116548455 0.59487844 -0.2494981196 0.086922295 -0.075488505 ## 24 0.320052060 0.35575234 -0.2002483247 0.073501208 -0.028683520 ## 25 0.226020916 0.38053577 -0.2829375696 0.057844064 -0.125723103 ## 26 0.434698863 -0.01620189 -0.0228296456 0.040594850 0.018358257 ## 27 0.462587642 -0.07973733 0.0872440317 0.046221679 0.028473423 ## 28 0.462892804 -0.08746326 0.1130809043 0.048047644 0.048644676 ## 29 0.409464629 -0.14642284 0.1498949779 0.045443752 -0.017221474 ## 30 0.477903756 -0.09769640 0.1790645512 0.060276109 -0.001131376 ## Axis.6 Axis.7 Axis.8 Axis.9 Axis.10 ## 1 -0.078285649 0.0281757686 0.152419739 0.0620214512 -0.0084554849 ## 2 0.042274052 0.0647050617 -0.046966117 0.0143279884 0.0405790440 ## 3 -0.092178285 0.0646661933 -0.122869623 0.0796812732 -0.0146515001 ## 4 -0.126239659 0.0018330966 -0.077145856 0.0229106939 -0.0158674810 ## 5 -0.147957254 -0.2144370289 0.052128944 -0.1149083302 -0.0366926489 ## 6 -0.149604492 0.0187947347 0.049587848 0.0219358922 0.0065920493 ## 7 -0.061421046 0.0155580388 -0.066973268 0.0493668301 0.0392205663 ## 8 -0.073508675 0.0132432281 0.019726717 -0.0102409140 0.0260418495 ## 9 0.212219629 -0.0213876730 0.084549171 0.0833210876 -0.0862271809 ## 10 -0.042173259 0.0595019777 -0.006366994 -0.1525320721 0.1266833055 ## 11 0.097100129 -0.0547434551 0.026313041 -0.1170521719 0.1003201704 ## 12 0.118684341 -0.0038674809 -0.036603841 -0.0083417190 -0.0032760416 ## 13 0.150478201 -0.0152858466 -0.057633010 -0.0454827223 -0.0944894934 ## 14 0.040946350 0.0171424468 -0.062093588 -0.0221704722 -0.1350306736 ## 15 0.034048165 -0.0516086788 0.098276062 -0.0360009400 -0.1004717412 ## 16 -0.087210913 -0.0623387129 0.185188284 0.0934010593 -0.0134974136 ## 17 0.065064290 0.0156944167 0.056920618 0.0397691611 0.1316850202 ## 18 0.067261462 0.0089925735 0.074536919 0.0067912156 0.0997951967 ## 19 -0.081932990 0.0808348609 -0.058475012 0.1289316028 0.0384049959 ## 20 0.005055568 0.0522460709 0.021009409 0.0305227531 0.0251360419 ## 21 -0.012210424 0.0170555064 -0.026624540 -0.0107184566 0.0473053698 ## 22 0.018336154 -0.0391108664 -0.009713173 -0.0004278611 -0.0145278880 ## 23 0.130741953 -0.1778339520 -0.067327702 0.1126514521 0.0477877228 ## 24 0.088821183 0.2340538172 0.069625917 -0.0988142834 -0.0374512340 ## 25 -0.235264361 -0.0454730098 -0.051405489 -0.0582072398 -0.0511812804 ## 26 -0.046619217 0.1067385313 0.019401955 -0.0020776418 -0.0875194852 ## 27 0.010207061 0.0240932023 -0.033950337 -0.0162326594 -0.0382303296 ## 28 0.031303330 0.0001778202 -0.062589906 -0.0076687424 -0.0357280637 ## 29 0.088986182 -0.0695883636 -0.054404092 -0.0394183353 0.0005809206 ## 30 0.033078176 -0.0678322774 -0.068542079 -0.0053378990 0.0431656874 ## Axis.11 Axis.12 Axis.13 Axis.14 Axis.15 ## 1 -0.022513152 -0.0318331401 -0.0045374664 -0.015077925 0.0031514532 ## 2 0.004346706 -0.0464769912 -0.0303066505 0.006230699 -0.0144407298 ## 3 0.007605501 -0.0202944454 0.0086976933 0.001783476 -0.0241033581 ## 4 0.113604692 0.0150396902 0.0625367256 -0.057056064 0.0451045108 ## 5 0.085457125 -0.0373920345 -0.0011773242 0.040833799 -0.0080899983 ## 6 0.012985916 0.0573687582 0.0214274380 -0.005953678 -0.0351495991 ## 7 -0.087085273 0.0072777798 -0.0122808336 0.029907929 0.0252014820 ## 8 0.013088057 0.0134033106 -0.0014114206 -0.002947475 0.0007884534 ## 9 -0.005670494 -0.0108812935 -0.0133239372 -0.020611411 -0.0101564754 ## 10 -0.097334439 -0.0219174760 0.0170523689 0.007001587 0.0027982719 ## 11 0.032374573 0.1009488052 -0.0365944549 -0.009018777 0.0006566102 ## 12 -0.022014126 0.0203339131 0.0157782484 0.010840871 0.0182929659 ## 13 0.068391690 -0.0329503130 -0.0342092959 0.034415085 -0.0129269717 ## 14 0.016999784 -0.0101130826 0.0176159540 -0.010254550 -0.0128577160 ## 15 -0.117836229 0.0037692594 0.0003900737 -0.029259843 0.0294199049 ## 16 -0.024101817 0.0055763715 0.0259347583 0.044524714 -0.0066274081 ## 17 0.054096138 -0.0007715256 0.0698100584 0.003525640 -0.0067179644 ## 18 0.035445421 -0.0269397615 -0.0745064719 -0.076763249 -0.0162243590 ## 19 -0.025979200 0.0085842408 -0.0593572055 0.035387675 0.0027740422 ## 20 0.053661635 -0.0609488270 -0.0272268776 -0.026509555 0.0224754279 ## 21 0.061210849 0.0078654082 -0.0293185530 0.047424785 0.0158689438 ## 22 -0.015952815 -0.0092570258 -0.0047907493 0.024730677 0.0553511539 ## 23 0.009607789 0.0150524279 0.0166706456 0.014413980 0.0045712548 ## 24 0.029482022 -0.0375430818 0.0457779315 0.034080068 0.0062274271 ## 25 -0.034619949 -0.0346910621 -0.0466250483 -0.033314532 -0.0074982529 ## 26 0.047801977 0.0941097564 -0.0065089702 -0.001246796 -0.0140351406 ## 27 -0.063767848 0.0481306939 -0.0117106873 0.020080313 -0.0210301432 ## 28 -0.047675392 0.0376833081 0.0289096828 -0.050138582 0.0078730675 ## 29 -0.025499193 -0.0053410529 -0.0219190042 -0.002121161 -0.0123922727 ## 30 -0.056109947 -0.0477926103 0.0852033720 -0.014907698 -0.0383045803 ## Axis.16 Axis.17 Axis.18 ## 1 -0.0041089733 0.001281615 -1.578001e-04 ## 2 -0.0008511369 -0.010134296 6.215124e-04 ## 3 -0.0191012489 0.008554064 5.435894e-03 ## 4 0.0007208242 -0.009200677 2.802553e-03 ## 5 0.0061478570 -0.001737084 -2.337866e-03 ## 6 0.0065979265 0.011562195 1.814119e-03 ## 7 0.0257149123 0.006045217 -8.690735e-03 ## 8 0.0019250117 0.001207893 1.716228e-05 ## 9 -0.0069122537 0.003732332 5.125124e-04 ## 10 -0.0136488283 -0.003474875 -7.283457e-04 ## 11 -0.0015574416 0.002778467 1.154824e-03 ## 12 0.0021606023 -0.004478062 4.226975e-03 ## 13 0.0179575259 -0.001803925 -7.357764e-03 ## 14 -0.0238185726 -0.001882466 3.850686e-03 ## 15 0.0216875991 0.002420574 2.142474e-03 ## 16 -0.0216100892 -0.011978541 -5.622120e-03 ## 17 0.0116958034 0.013519024 -8.567581e-05 ## 18 -0.0117577436 -0.008506454 4.595190e-03 ## 19 0.0007245537 0.004918996 -2.351058e-03 ## 20 0.0347124084 -0.001991238 -2.245306e-03 ## 21 -0.0159517282 -0.015709825 -4.490605e-03 ## 22 -0.0227505122 0.015099333 1.584427e-02 ## 23 0.0012299491 -0.005809954 3.671371e-04 ## 24 -0.0038107317 0.002199450 -1.845175e-03 ## 25 -0.0004268606 0.003758138 2.147508e-04 ## 26 0.0156858166 0.011041608 7.294447e-04 ## 27 0.0147261003 -0.031157037 1.393095e-02 ## 28 -0.0198937624 -0.011611121 -2.269475e-02 ## 29 -0.0113382328 0.033581892 -4.128149e-03 ## 30 0.0158512255 -0.002225245 4.474894e-03 ## ## $trace ## [1] 7.503343 ## ## attr(,&quot;class&quot;) ## [1] &quot;pcoa&quot; biplot.pcoa(spe.bray.pcoa, spe.hel, dir.axis2 = -1) # Le choix d&#39;une mesure de distance est très important car # ça influence les résultats! Défi 5 Exécuter une PCoA sur les données d’abondance des espèces d’acariens transformées Hellinger (données mite). Quels sont les axes importants? Quels groupes de sites pouvez-vous identifier? Quelles espèces sont liées à chaque groupe de sites? Comment les résultats de cette PCoA se comparent-ils avec ceux de la PCA? Défi 5 - Solution mite.spe.h.pcoa &lt;- pcoa(dist(mite.spe.hel)) mite.spe.h.pcoa ## $correction ## [1] &quot;none&quot; &quot;1&quot; ## ## $note ## [1] &quot;There were no negative eigenvalues. No correction was applied&quot; ## ## $values ## Eigenvalues Relative_eig Broken_stick Cumul_eig Cumul_br_stick ## 1 11.602643193 0.4264887201 0.1184794691 0.4264887 0.1184795 ## 2 3.526055542 0.1296103733 0.0899080405 0.5560991 0.2083875 ## 3 2.186367334 0.0803662571 0.0756223263 0.6364654 0.2840098 ## 4 1.570196758 0.0577171249 0.0660985167 0.6941825 0.3501084 ## 5 1.171005251 0.0430436861 0.0589556596 0.7372262 0.4090640 ## 6 1.006554628 0.0369988276 0.0532413739 0.7742250 0.4623054 ## 7 0.844412363 0.0310388195 0.0484794691 0.8052638 0.5107849 ## 8 0.653368743 0.0240164585 0.0443978365 0.8292803 0.5551827 ## 9 0.548575687 0.0201644865 0.0408264079 0.8494448 0.5960091 ## 10 0.529037917 0.0194463193 0.0376518047 0.8688911 0.6336609 ## 11 0.385624780 0.0141747545 0.0347946619 0.8830658 0.6684556 ## 12 0.380429104 0.0139837724 0.0321972593 0.8970496 0.7006528 ## 13 0.340199814 0.0125050284 0.0298163069 0.9095546 0.7304691 ## 14 0.284248035 0.0104483589 0.0276185047 0.9200030 0.7580876 ## 15 0.276071181 0.0101477950 0.0255776884 0.9301508 0.7836653 ## 16 0.240701481 0.0088476794 0.0236729265 0.9389985 0.8073383 ## 17 0.225645857 0.0082942663 0.0218872122 0.9472927 0.8292255 ## 18 0.186479038 0.0068545766 0.0202065399 0.9541473 0.8494320 ## 19 0.162466773 0.0059719363 0.0186192383 0.9601192 0.8680512 ## 20 0.149898967 0.0055099702 0.0171154789 0.9656292 0.8851667 ## 21 0.147693237 0.0054288922 0.0156869075 0.9710581 0.9008536 ## 22 0.128050704 0.0047068741 0.0143263633 0.9757650 0.9151800 ## 23 0.114094908 0.0041938885 0.0130276620 0.9799589 0.9282077 ## 24 0.085824674 0.0031547342 0.0117854259 0.9831136 0.9399931 ## 25 0.081991690 0.0030138418 0.0105949498 0.9861274 0.9505880 ## 26 0.076994065 0.0028301396 0.0094520926 0.9889576 0.9600401 ## 27 0.056610567 0.0020808852 0.0083531915 0.9910385 0.9683933 ## 28 0.055672481 0.0020464031 0.0072949905 0.9930849 0.9756883 ## 29 0.047757948 0.0017554816 0.0062745823 0.9948404 0.9819629 ## 30 0.042041391 0.0015453530 0.0052893606 0.9963857 0.9872522 ## 31 0.036886153 0.0013558573 0.0043369797 0.9977416 0.9915892 ## 32 0.023659824 0.0008696853 0.0034153207 0.9986112 0.9950045 ## 33 0.019271950 0.0007083963 0.0025224635 0.9993196 0.9975270 ## 34 0.013529456 0.0004973143 0.0016566627 0.9998170 0.9991837 ## 35 0.004979684 0.0001830427 0.0008163265 1.0000000 1.0000000 ## ## $vectors ## Axis.1 Axis.2 Axis.3 Axis.4 Axis.5 Axis.6 ## 1 0.072050731 -0.404874957 0.123880209 -0.214979492 -0.009322998 0.04540086 ## 2 -0.080178872 -0.475895251 -0.040770237 -0.132551999 -0.187285469 0.03404235 ## 3 -0.006340714 -0.532965199 -0.071896456 -0.085631135 -0.109737585 -0.05262964 ## 4 0.065918599 -0.390261954 -0.023053705 -0.061263985 -0.125083832 0.06828817 ## 5 0.475151216 -0.176766735 0.005673279 0.014041251 -0.127282100 0.05785622 ## 6 0.508769546 -0.137055078 -0.066473245 0.113920983 -0.061556779 0.12041210 ## 7 0.615792769 -0.012727468 -0.035579920 0.025759028 0.018790021 0.12033710 ## 8 0.578722079 -0.084058324 0.062705431 0.012841804 -0.143529919 0.05319677 ## 9 0.197878804 -0.410753144 0.020690961 -0.194665880 -0.078958035 -0.11658023 ## 10 0.608325106 -0.015468259 0.025731538 0.050448066 -0.021002061 0.12889625 ## 11 0.478021945 -0.067075271 0.317222690 -0.060486992 0.141958632 0.14829596 ## 12 0.587259598 0.042587053 0.079365613 0.019598754 0.066693660 0.01729548 ## 13 0.558944326 0.009379685 -0.050295252 0.097753588 -0.087203405 -0.11625856 ## 14 0.570349529 -0.075826157 0.015931378 0.089155654 -0.040227562 0.26254962 ## 15 0.081724886 -0.327652800 0.089794988 -0.250898445 -0.041952295 -0.01567727 ## 16 0.492924862 -0.063384901 0.107549414 -0.061933568 0.122444718 -0.13143314 ## 17 0.605418395 -0.031177967 0.062448858 -0.043530873 0.111937022 -0.17626401 ## 18 0.473400394 -0.060716576 -0.025228123 0.008950565 -0.053679152 0.17744501 ## 19 0.268953127 0.072137657 -0.079958674 -0.091057728 -0.041435916 0.19671612 ## 20 0.592151288 -0.134817005 -0.106682850 0.063603203 -0.061353879 0.17070630 ## 21 0.543656538 0.073134587 -0.124289921 0.168830238 0.044259335 0.06728093 ## 22 0.540084475 0.120592846 -0.225644134 0.135460999 -0.044740495 0.01840295 ## 23 0.116027323 0.058972633 0.223538124 -0.207598692 0.099716583 -0.09291938 ## 24 0.610752047 -0.066007703 -0.037653614 0.011528145 0.134979947 -0.08918350 ## 25 0.426004859 0.034350409 0.194793819 -0.178435260 0.059422271 -0.10172354 ## 26 0.390690776 -0.109530838 0.011995476 -0.092230045 -0.057845914 -0.24266016 ## 27 0.524790071 0.044933189 -0.166240198 0.188395173 -0.038489018 0.02482370 ## 28 0.196897594 0.234782188 0.110252021 -0.041060202 0.141258740 -0.32628433 ## 29 0.421587994 0.118835403 0.305620715 -0.099846519 0.208524889 -0.14463319 ## 30 -0.009302721 -0.058229090 0.079113402 -0.151699920 0.202495657 -0.08300807 ## 31 -0.177633108 -0.031743654 -0.041439735 -0.140365559 -0.036010456 -0.18243789 ## 32 0.205409152 0.191604525 -0.141474447 -0.054579730 0.008040158 0.05754339 ## 33 0.008226966 0.208030587 0.149147135 -0.172134356 0.135320503 0.02130081 ## 34 0.312956055 0.162088598 -0.125369421 0.013521253 -0.065070596 -0.11979025 ## 35 0.264512217 0.223992775 -0.435382803 0.112936301 0.083849778 -0.04652766 ## 36 -0.027824772 0.092274228 -0.327703849 -0.078961006 0.068275335 0.03289788 ## 37 0.016183720 0.316431956 -0.392738667 0.051253154 0.021953563 0.11550571 ## 38 -0.458017323 -0.230280095 -0.047613826 -0.053488937 0.063512513 0.03129361 ## 39 -0.311094921 -0.105368514 -0.249237716 -0.067490190 0.063178838 -0.25061363 ## 40 -0.414536308 0.112183606 -0.095507102 -0.165839771 -0.154670110 0.09171669 ## 41 -0.477835885 -0.018642421 -0.060820510 -0.184988555 -0.081318549 0.06911550 ## 42 -0.526855511 0.019085981 -0.124548101 -0.156244757 -0.072060578 0.02227910 ## 43 -0.421784721 -0.347740029 -0.054249960 0.111664813 0.124847907 -0.04252694 ## 44 -0.496668283 -0.472265941 -0.017533282 0.363355616 0.295294190 0.08036815 ## 45 -0.411617255 0.147025739 -0.060863587 -0.106046792 0.078253378 -0.04681688 ## 46 -0.147972303 0.152402083 -0.292129022 -0.037564627 -0.010626511 -0.04209114 ## 47 -0.059396147 0.422482800 -0.363724173 0.032699346 -0.021440171 0.06018240 ## 48 -0.540357634 -0.019577661 -0.227248515 0.068413003 -0.064988499 0.03087487 ## 49 -0.103779359 0.421322375 0.011131249 -0.084039038 -0.046883869 -0.06674867 ## 50 -0.374998473 0.082845872 0.096635202 -0.135005680 -0.112409494 0.10430752 ## 51 -0.457882308 0.194328933 -0.002301925 -0.092323183 -0.034599072 -0.06958501 ## 52 -0.520380836 0.050588718 -0.089262342 0.004906471 0.072706620 -0.04358735 ## 53 -0.452455480 0.169000417 0.068782608 0.065289195 -0.132036073 -0.07522844 ## 54 -0.555004826 0.067191946 0.128956265 -0.175519992 0.049194077 0.16125106 ## 55 -0.379842520 0.165447433 -0.103778345 -0.174888630 -0.088650571 -0.10147860 ## 56 -0.577115324 -0.040132955 0.149994387 0.006154776 -0.051880100 0.07292502 ## 57 -0.535724762 -0.070762288 -0.109142545 0.170910085 0.561454633 0.10546998 ## 58 -0.349421103 0.343568476 -0.221171854 -0.097188293 0.006148163 0.06623027 ## 59 -0.569563891 -0.454176975 -0.002932557 0.318294201 0.184176662 -0.05703861 ## 60 -0.475931334 0.062643143 0.022690473 -0.118532626 -0.051440357 0.06652905 ## 61 -0.351111983 0.276409674 0.324110966 0.008842665 -0.026062892 0.16970214 ## 62 -0.062102525 0.435917916 0.507168325 -0.037231831 0.244367271 0.27667297 ## 63 -0.134804460 0.114873983 0.233289844 0.124305709 -0.110676437 -0.15028214 ## 64 -0.417100776 0.147390907 0.227304817 0.187682188 -0.140213429 0.03178561 ## 65 -0.261469224 -0.005878805 0.233424650 0.504731310 -0.169850465 -0.08177118 ## 66 -0.103105531 0.340214098 0.237501878 0.199192965 -0.129160880 -0.07185010 ## 67 -0.641978437 -0.473517641 -0.038747654 -0.013507009 -0.029761513 0.06843047 ## 68 -0.250539755 -0.039504714 0.307659441 0.189967645 -0.300772626 -0.00219446 ## 69 0.059739523 0.042395505 0.013737233 0.327360181 -0.019588367 -0.20136385 ## 70 -0.327547127 0.173388449 0.130845880 0.252042971 -0.132197039 -0.10714025 ## Axis.7 Axis.8 Axis.9 Axis.10 Axis.11 ## 1 0.054979690 -0.1259798298 -0.038388402 0.0416029181 -0.003343086 ## 2 -0.013772704 0.0424759853 -0.023242740 0.0142629726 0.053781054 ## 3 0.011569809 0.0487209775 -0.026872719 0.0155367809 0.066889828 ## 4 0.149518923 0.0082899082 -0.072465166 0.0027443926 0.108237651 ## 5 -0.163909150 0.1002439832 -0.001393597 -0.1092631607 0.180358560 ## 6 0.031834849 -0.0230837010 0.071516621 -0.0012109434 0.093347455 ## 7 0.014793181 -0.1081213875 0.006970952 -0.0972433509 0.008375110 ## 8 -0.146234433 0.1232853527 0.077095965 0.1271726643 0.053170849 ## 9 -0.124276773 -0.0543478847 0.107500472 0.1871654922 -0.067217056 ## 10 -0.002018798 0.0427695962 -0.118563815 0.0462900431 -0.055493791 ## 11 -0.050546611 0.1797122146 -0.006052679 -0.0122751784 0.127062487 ## 12 -0.051450504 -0.0985123481 -0.106546735 -0.0031404745 0.023612699 ## 13 -0.149360160 -0.0114240488 -0.074643603 0.1139616947 0.124733237 ## 14 0.137455955 0.1771412930 0.001755198 -0.0002730352 -0.117938414 ## 15 -0.005111966 0.1339553719 -0.026358135 -0.0470726142 -0.139668556 ## 16 -0.179283676 -0.1143665801 -0.079927663 0.1696727226 -0.061972235 ## 17 -0.098459396 -0.0943549245 0.021270966 -0.0725845230 -0.090125685 ## 18 0.211932781 0.0254476001 -0.024196119 -0.0860041122 -0.038021355 ## 19 0.059585480 -0.0006793380 0.076005861 0.0087134149 -0.159833033 ## 20 -0.033432873 0.1793374186 0.058011000 0.1186598197 -0.149502079 ## 21 -0.051116783 -0.2097074081 0.088113698 -0.0324457386 -0.003899276 ## 22 -0.006819811 -0.0439374076 -0.049141951 -0.0911331199 -0.007124479 ## 23 0.153258923 -0.1054977932 0.153647302 0.0873371291 0.040112862 ## 24 -0.090440201 -0.1245755252 -0.056912009 -0.0516696004 0.015033932 ## 25 -0.145680117 -0.0336613586 0.054221475 -0.2319031504 0.007034901 ## 26 -0.016058442 -0.0116438487 -0.039825838 -0.0325677863 0.095929468 ## 27 -0.073027893 0.1183113984 -0.100232251 0.0374415826 -0.063618254 ## 28 -0.061258900 0.0634346364 0.003413527 -0.0064311681 -0.012612001 ## 29 0.168378760 0.0261114845 -0.010076647 -0.1954983867 -0.063165381 ## 30 0.201627200 0.0918935222 0.006844985 0.1355824594 -0.073197434 ## 31 0.105334433 -0.0413408787 -0.013162531 -0.1551350458 -0.004087350 ## 32 0.048916610 -0.0274920479 0.152668370 0.1246760627 0.073120512 ## 33 0.229288869 0.0983781577 -0.009600415 -0.0805465316 -0.002913514 ## 34 -0.054478868 -0.0026304894 0.144344969 -0.0650447663 0.009368832 ## 35 0.150479695 -0.1078446792 -0.103303802 -0.0327024027 -0.028222449 ## 36 0.088755708 -0.1323677937 -0.052061228 0.0413269157 0.050078439 ## 37 0.109922197 -0.1350301284 0.009319563 -0.0211761074 -0.045178157 ## 38 0.196889490 0.0239558002 0.050481487 0.0734082622 0.060643762 ## 39 -0.137354105 0.1229745346 -0.054003032 -0.0989478988 -0.113107163 ## 40 -0.043769785 -0.0292884844 0.095585470 -0.0914004885 0.003912074 ## 41 0.053564940 0.0694142397 -0.032623657 -0.0964475885 0.027341540 ## 42 -0.119494712 0.0368513256 -0.052701512 0.0040413750 0.022440629 ## 43 0.175127167 -0.1120364171 0.075237982 0.1333128325 0.049235854 ## 44 -0.071150065 -0.0007002596 0.339956513 -0.0473190064 0.017139112 ## 45 0.053744586 0.1090509070 0.024947135 0.0195849462 -0.020556711 ## 46 0.111543767 -0.1338339995 -0.036350496 0.1302375527 0.046500041 ## 47 -0.103466859 -0.0289057423 0.023898507 -0.0095084652 0.011134728 ## 48 -0.041464580 0.1508344704 -0.019512061 -0.1239059035 -0.013651658 ## 49 0.032783637 0.0568739426 0.234081670 0.0888618090 -0.034706009 ## 50 -0.083648566 -0.0534891586 -0.044797312 -0.0381473572 0.041772326 ## 51 -0.060893303 -0.0107780319 -0.077948348 0.1063037716 0.021821591 ## 52 0.047538862 0.1001280449 -0.014901675 -0.0261195396 0.134841333 ## 53 -0.014301516 -0.0081772429 -0.011935959 0.0064219620 0.045795454 ## 54 -0.100444424 -0.0304592644 -0.021749289 0.0388418562 -0.058753685 ## 55 -0.094205657 0.0757014184 0.129503314 0.0659212523 -0.097470701 ## 56 -0.157392732 -0.1150222659 0.025971435 -0.0083061667 -0.048830224 ## 57 -0.206113955 0.1206099899 -0.254283898 0.1368673802 -0.010273229 ## 58 -0.117188568 0.1068084565 0.031439021 -0.0480701935 0.043925961 ## 59 -0.020235949 -0.0781189775 0.076688475 -0.1240166048 -0.032437350 ## 60 -0.061703906 -0.0419688609 -0.066995799 -0.0129099288 0.102440109 ## 61 0.027713475 -0.0100958081 -0.115194257 -0.0544700755 -0.079657841 ## 62 -0.039775488 -0.0950793695 0.033826038 0.0016214222 0.141246681 ## 63 0.217789267 -0.0336927708 -0.113982235 0.1210213701 -0.084367040 ## 64 -0.078221810 0.0122938516 0.007016610 0.0218941720 -0.058225073 ## 65 -0.011806064 0.0026497544 0.049509607 -0.0619555495 -0.087247318 ## 66 -0.071722739 0.0223785593 0.035953419 0.1017211984 -0.035936948 ## 67 0.001160322 -0.1628278152 -0.115069960 -0.0881969614 -0.096911371 ## 68 0.030564329 -0.1753016469 -0.104511592 0.0521954334 -0.017223454 ## 69 0.214509235 0.2388983869 -0.039636129 0.0258853614 0.140137016 ## 70 0.060530698 0.0174429339 -0.057632349 -0.0452460983 0.035913270 ## Axis.12 Axis.13 Axis.14 Axis.15 Axis.16 ## 1 -0.110681911 -0.011045953 -0.0143687288 0.0079825796 0.0241099789 ## 2 0.023069872 -0.081317893 -0.0266120930 0.0226698395 0.0719038273 ## 3 -0.077773222 0.033308708 -0.0283338720 0.0267315712 -0.0127746261 ## 4 -0.075938167 -0.053293673 0.0244658272 -0.0326340920 0.0339536617 ## 5 -0.041071137 0.164515099 -0.0594547449 -0.0207568133 -0.0826374492 ## 6 -0.185673332 0.089457954 -0.0085475005 0.0542603232 -0.0409483579 ## 7 -0.085801770 -0.038865240 0.0141818148 0.0423703885 -0.0080447997 ## 8 -0.004066936 0.066459189 0.0262256033 0.0612070960 -0.0275915600 ## 9 -0.030443746 -0.053677400 -0.0072257576 0.0366395855 -0.0397572555 ## 10 -0.099515839 0.079048313 0.0416959754 0.0172507049 0.0814299884 ## 11 -0.012171578 -0.014843432 -0.1379814582 -0.0312880402 -0.0413558844 ## 12 -0.002046185 0.022188461 -0.0204560588 0.0551185940 0.0512186249 ## 13 0.068098539 -0.056179799 0.0909004579 0.1046258321 -0.0017734530 ## 14 -0.059111344 0.021867551 0.0803926922 -0.0876316722 0.0542560583 ## 15 0.045801510 -0.088166986 0.0928434839 -0.2019252101 -0.0163125991 ## 16 0.014300846 -0.021868864 -0.0522306660 0.0081884716 0.0812231920 ## 17 0.028771164 0.071658071 0.0021089068 0.0206881839 -0.0314864586 ## 18 0.030726547 0.012264276 0.0293283220 -0.0382539780 0.0439208048 ## 19 -0.085603786 -0.023819321 -0.0291961284 0.0044453546 -0.0152077305 ## 20 0.123535092 -0.134428794 0.0215807107 -0.0395596539 -0.0502173529 ## 21 0.018151588 -0.029190820 -0.0245242151 0.0537191247 0.0596366183 ## 22 0.140126583 0.005291937 0.0839636565 -0.0106682225 -0.0278820591 ## 23 0.031711528 0.095810923 -0.0034786776 -0.1027400186 -0.0449714002 ## 24 0.027819338 -0.181670115 0.0065002083 0.0976257454 -0.1236277050 ## 25 -0.024821202 0.098264755 -0.1177909307 -0.0425812286 -0.0040741126 ## 26 0.127161655 0.029268110 0.0388809399 -0.0707441743 -0.0379741011 ## 27 0.052334086 -0.037429824 -0.0599071300 0.0761656200 0.1010558734 ## 28 -0.092961163 -0.181967202 -0.0270398763 -0.0919897718 0.0575604444 ## 29 0.093687768 0.020294764 0.0577503466 0.0838798983 -0.0017052840 ## 30 -0.024713583 -0.002694932 -0.0223308284 0.0908275233 -0.0374814190 ## 31 -0.100524831 -0.078004085 0.0465755459 -0.0165638415 0.0557950946 ## 32 0.070699632 0.089570673 -0.0174431879 -0.2154265746 -0.0926176365 ## 33 0.059226667 -0.014497544 -0.0427052434 0.0778643971 -0.0213468354 ## 34 -0.018441513 -0.019694187 0.0806471630 -0.1137315673 0.0172014231 ## 35 0.027638380 0.052405275 -0.1003719731 -0.0523477350 -0.0003811319 ## 36 -0.097975258 -0.030667144 0.0043216189 0.0049461448 -0.1159265467 ## 37 -0.028584717 -0.041617091 -0.0357896180 -0.0188914570 0.0182962223 ## 38 0.127957150 -0.048227349 0.0519499617 0.0726603498 -0.0341254867 ## 39 0.028102493 0.077257923 0.0310572946 0.0008312879 -0.0051799519 ## 40 0.075825576 0.016032704 -0.0632337456 0.0291392535 0.0763029125 ## 41 0.111756752 0.033667256 -0.0311763256 0.0441776645 0.0644633823 ## 42 0.036429088 -0.033751529 -0.0363677386 0.0322966729 0.0545030717 ## 43 0.129774163 -0.036491377 -0.0557499806 0.0137069233 -0.0401607946 ## 44 0.070104777 -0.062094775 -0.0433794081 0.0182616684 0.0380731199 ## 45 -0.126003120 0.037891873 0.0002582049 0.0226782908 0.0553078302 ## 46 0.004263033 0.046322858 0.0239659977 -0.0399926660 0.0541260538 ## 47 -0.001659923 0.020460426 0.0259287483 -0.0094058501 -0.0110036751 ## 48 -0.032709107 -0.087265899 -0.0198575662 0.0495634437 -0.0629143634 ## 49 -0.058900987 -0.012472448 -0.1098073595 0.0685156001 0.0598695786 ## 50 0.115631566 -0.051108736 -0.0584228139 -0.0408385396 0.1628695158 ## 51 -0.072780179 -0.007092176 0.0313132878 -0.0185868329 -0.0094136521 ## 52 -0.152294360 -0.097327163 0.0426185297 -0.0081616694 0.0191540974 ## 53 -0.104341064 -0.093331568 -0.1189367774 -0.0703678560 -0.0242693060 ## 54 -0.014377757 0.072591511 0.0435498741 0.0597984421 -0.0900892337 ## 55 0.035026367 0.184795940 0.0084732982 0.0778422349 0.0483353160 ## 56 -0.032990865 0.013332000 0.0418194839 -0.0287690453 -0.0155565347 ## 57 0.004194121 0.076674704 -0.0565545580 -0.1131544969 0.0163298509 ## 58 0.051700255 -0.022221390 0.0554465303 0.0664377252 -0.0808606455 ## 59 -0.103406549 0.081667633 0.1075354327 -0.0030932673 0.0682957346 ## 60 0.075581566 -0.001611872 0.1893893068 -0.0188132653 -0.0348104271 ## 61 0.017502992 -0.035358820 -0.1216866911 0.0366535888 -0.1530463112 ## 62 0.015546112 -0.037291029 0.1435086796 0.0009765413 0.0994535383 ## 63 -0.045037400 0.099492146 0.0596002140 0.0400234622 -0.0094934135 ## 64 -0.022047639 -0.017287396 -0.0062949148 -0.0078039177 -0.0521778649 ## 65 -0.003098698 0.004050166 0.0114296984 -0.0327366085 -0.0463902317 ## 66 -0.039717775 -0.010170666 0.1166417496 0.0374516421 -0.0074743343 ## 67 0.024153473 0.087405631 0.0009171793 0.0301721125 -0.0522177596 ## 68 0.111865185 0.014185271 -0.1180893744 -0.0617751275 0.0557352790 ## 69 0.073734060 0.091752652 -0.0219694431 0.0390492904 0.0446419102 ## 70 -0.024722882 -0.061210264 -0.0304513591 -0.0462099789 -0.0637432588 ## Axis.17 Axis.18 Axis.19 Axis.20 Axis.21 ## 1 -0.1456382325 -0.020901790 9.674368e-02 0.0870975056 -9.637297e-02 ## 2 0.0124733490 0.043376108 -2.727828e-02 0.0403973485 1.100675e-01 ## 3 0.0464678390 0.037778081 -7.583428e-02 -0.0642431152 5.495810e-02 ## 4 0.0519271696 0.098510329 -2.681726e-03 0.0026836134 1.733641e-02 ## 5 -0.0833144865 -0.025803572 -8.458268e-03 -0.0005495176 -4.575199e-02 ## 6 0.0497598527 0.050639841 1.499189e-02 -0.1004140334 -9.319535e-03 ## 7 0.0812759804 0.061605210 -2.118716e-02 -0.0542437757 5.122670e-02 ## 8 0.0163084099 -0.076890124 -1.391162e-02 -0.0646313186 5.576417e-02 ## 9 0.0233632665 -0.004852586 1.059609e-02 0.0157394381 -5.054585e-02 ## 10 0.0534031812 0.001314603 2.073294e-02 0.0275422690 6.973359e-03 ## 11 -0.0525447737 -0.041764439 2.956717e-05 0.0191515200 1.331754e-02 ## 12 0.0208906704 0.029038591 1.676862e-02 0.0008119271 -4.611191e-02 ## 13 0.0938237905 -0.032553245 1.287237e-01 -0.0117765005 -1.001255e-01 ## 14 0.0401989312 -0.039743814 4.465570e-02 0.0172717046 2.222420e-02 ## 15 0.0349053822 -0.025640048 3.008143e-04 0.0249648290 3.878325e-02 ## 16 -0.0050710435 0.033032460 -2.811728e-02 0.0718797313 -6.867173e-03 ## 17 0.0017577951 -0.056925167 -1.132138e-01 -0.0515443614 -5.719464e-02 ## 18 0.0493068893 0.030978770 -1.696447e-02 -0.0250514561 -3.551161e-02 ## 19 -0.1046646594 0.052207447 5.609506e-02 -0.0314716404 -1.215348e-01 ## 20 -0.0350952229 -0.095960338 5.680576e-03 -0.0214747161 2.500358e-02 ## 21 -0.0553104520 0.057755124 1.215887e-02 0.1044506490 4.004886e-02 ## 22 -0.0006623028 0.011511928 -7.070360e-02 0.0845345986 -6.844238e-02 ## 23 0.0746764903 0.033409411 -1.176782e-02 -0.0159792892 -7.584224e-03 ## 24 0.0627715717 0.009966023 1.587759e-02 -0.0240554811 1.011006e-01 ## 25 -0.0955945734 -0.008384812 2.671743e-02 -0.0084945848 5.837061e-02 ## 26 0.0087090209 -0.026850354 2.910935e-02 0.0339621716 -2.444727e-02 ## 27 -0.1116226136 -0.015536509 -8.273959e-02 0.0011804383 -4.410336e-03 ## 28 -0.0019270743 -0.005476935 2.779431e-02 -0.0504395321 5.614761e-02 ## 29 0.0555162897 -0.052117008 -5.692147e-02 -0.0196729895 -4.552761e-02 ## 30 -0.1083219890 0.079937991 -7.797664e-03 0.0036153124 4.241026e-03 ## 31 0.0210203153 0.021252772 1.766589e-02 0.0294281270 -2.602886e-02 ## 32 0.0607819660 0.040943928 -2.843305e-02 -0.0094659260 -4.601792e-02 ## 33 -0.0045373109 0.067389722 -2.319957e-02 -0.0034037391 2.076090e-02 ## 34 -0.0368734257 0.071470037 3.443703e-02 0.0824718564 3.117178e-02 ## 35 -0.0371702856 -0.098710408 7.431323e-02 -0.0376516222 6.491082e-02 ## 36 -0.0933149922 -0.040027136 -4.465444e-02 0.0241852246 4.020198e-02 ## 37 0.0279709564 -0.021500230 -2.957365e-02 -0.0346951700 -3.805964e-03 ## 38 -0.1358018077 -0.071321019 -1.206956e-02 -0.0831281648 -1.566410e-02 ## 39 -0.0284423229 0.059594153 1.160889e-02 -0.0859147631 -4.960028e-02 ## 40 -0.0227355188 0.008865651 4.523321e-02 -0.0073460255 5.409568e-02 ## 41 0.0025252305 0.006205674 1.090416e-02 -0.0456658794 -7.294540e-03 ## 42 0.0548592968 0.032469339 -7.241887e-02 -0.0489473661 -2.336522e-02 ## 43 0.0382106202 0.060839320 2.035331e-02 0.0100785090 -2.139274e-02 ## 44 0.0072313700 -0.004341247 2.056001e-02 -0.0018962801 -2.338482e-03 ## 45 -0.0171363242 -0.001482175 -8.625515e-02 0.0463387765 2.249344e-02 ## 46 -0.0075013091 0.005879174 -6.317029e-02 -0.0101706353 1.753614e-02 ## 47 0.0019486749 -0.011812367 -1.311889e-02 0.0107399440 -6.271511e-03 ## 48 0.0497192593 -0.018716239 1.226912e-02 0.0336831474 -5.634660e-02 ## 49 0.0877754122 -0.111929400 1.515540e-03 0.0037856714 -2.171333e-02 ## 50 0.0240199161 0.056970595 2.562336e-02 -0.0676836527 -8.967807e-02 ## 51 -0.0120355411 -0.028588839 1.161441e-02 -0.0074609314 -1.034024e-02 ## 52 0.0317636944 -0.103718116 -5.543261e-02 0.0405272456 -8.566143e-02 ## 53 0.0340415108 -0.085818309 -3.974408e-03 0.0198963185 -8.425055e-03 ## 54 0.0328707243 0.002347393 -8.012554e-02 0.0883252354 9.331706e-03 ## 55 0.0484887994 -0.005276396 9.941347e-02 0.0361611022 6.189897e-02 ## 56 -0.0517700741 0.010802576 -3.645885e-02 -0.0009123045 6.037057e-03 ## 57 0.0395791660 0.053748584 2.946709e-02 -0.0300215283 5.607730e-03 ## 58 -0.0001176404 0.082635361 7.826619e-02 0.0270434193 5.502414e-02 ## 59 -0.0038324723 -0.037320361 3.703481e-02 -0.0154898388 -3.500361e-03 ## 60 -0.1137277250 -0.014767457 1.561514e-02 -0.0265594630 3.291779e-02 ## 61 0.0951175525 0.042426940 6.911839e-02 0.0515500430 -3.085042e-02 ## 62 -0.0089725872 -0.070216513 1.281842e-02 -0.0094503827 3.716633e-02 ## 63 -0.0209640183 -0.019030209 9.329783e-02 -0.0476428722 5.604272e-02 ## 64 -0.0515301184 0.057439040 -7.125371e-02 0.0144992628 1.912438e-03 ## 65 -0.0175077373 0.052011376 -2.425524e-02 -0.0053238447 -8.402267e-05 ## 66 -0.0006241893 0.062492289 -6.235889e-02 -0.0400704707 -4.015490e-03 ## 67 0.0999975705 -0.136561831 4.218747e-03 0.0527335325 2.944207e-02 ## 68 -0.0217427651 -0.046231320 -4.242624e-02 -0.0204847899 2.724055e-02 ## 69 0.0087569996 0.010837335 -1.182085e-02 0.1362221611 1.375847e-02 ## 70 -0.0581093253 0.019087137 6.625245e-02 -0.0595246707 -1.097167e-02 ## Axis.22 Axis.23 Axis.24 Axis.25 Axis.26 ## 1 -0.040438790 0.125439145 -0.0158793790 0.0262169979 -0.032543847 ## 2 0.024387648 0.052065779 0.0996724163 0.0778077538 -0.018061388 ## 3 -0.086269637 -0.004168564 0.0059333937 0.0319543989 0.030626656 ## 4 -0.034869674 -0.027382294 -0.0269101345 -0.0378773239 -0.016921288 ## 5 0.030036779 0.017268441 -0.0570507358 -0.0483347534 0.036998227 ## 6 0.006100397 0.035583272 -0.0449477016 -0.0053228203 -0.020271047 ## 7 -0.026626594 0.023744458 0.0491038626 0.0080658526 -0.042326060 ## 8 0.055670770 0.026121291 0.0795813958 -0.0688369706 0.037219596 ## 9 0.028711855 0.101320249 0.0075709486 -0.0186710912 -0.036963304 ## 10 -0.037428010 -0.071222853 -0.0106918310 0.0120690037 0.062894539 ## 11 0.017930432 -0.080083785 0.0320661871 0.0134429888 -0.045112533 ## 12 0.015282092 -0.068984778 -0.0448919987 0.0111739053 -0.055270619 ## 13 0.057862965 -0.041122358 -0.0157497206 0.0525205040 -0.023667241 ## 14 0.004988447 0.008619122 0.0285873472 0.0080955460 0.030268421 ## 15 0.112582986 -0.037144872 -0.0641084738 -0.0534223015 -0.037212826 ## 16 0.062953161 -0.025449487 0.0487586788 -0.0320571196 0.008712794 ## 17 -0.065844169 -0.033248458 0.0032921762 0.0293899323 0.010017483 ## 18 0.014359120 0.021467721 0.0572970856 0.0096608775 0.031206379 ## 19 0.020732901 -0.039225060 -0.0062623818 0.0313303492 -0.003068978 ## 20 -0.041895805 -0.002836519 -0.0543506259 0.0420522045 -0.005171203 ## 21 0.010350055 -0.036915762 -0.0057389293 -0.0277865916 0.015988502 ## 22 -0.075749328 0.075033764 0.0053072401 0.0131357455 0.066577826 ## 23 0.054769278 0.072622241 -0.0522673146 -0.0225822069 0.072173421 ## 24 -0.040920527 -0.020185112 -0.0582119418 -0.0335844503 -0.031989594 ## 25 0.038694389 0.021979269 0.0043703205 0.0232399786 -0.014549540 ## 26 -0.046802676 -0.076040334 0.0061659757 0.0366376061 0.031848755 ## 27 -0.066950931 0.018125759 -0.0459701521 -0.0763413162 -0.006922873 ## 28 -0.033027601 0.053894472 -0.0136118152 -0.0186692837 0.045289970 ## 29 0.035596749 0.041101907 0.0369002804 0.0131349928 -0.018393462 ## 30 0.000574700 -0.050649792 0.0448469749 0.0599955591 0.033001055 ## 31 0.018808949 -0.029277182 -0.0060642064 -0.0492494512 -0.000744636 ## 32 -0.082658736 -0.031005109 0.0192482593 -0.0031248121 -0.074999080 ## 33 -0.012704324 0.014495574 -0.0184860075 -0.0228263670 -0.028498236 ## 34 -0.052949707 -0.010914719 -0.0013438113 0.0349431552 0.027926227 ## 35 0.007960620 0.068887507 0.0210963756 0.0127561093 -0.050071720 ## 36 0.085110553 -0.064240287 0.0275202169 -0.0224393346 0.072291953 ## 37 0.045589464 -0.008421365 0.0074333720 -0.0189261612 0.002352847 ## 38 -0.029285505 -0.003169859 -0.0100256145 -0.0330001883 0.002370786 ## 39 0.011735590 -0.014602076 0.0565795037 -0.0010327008 -0.003159050 ## 40 0.016569944 -0.036348784 -0.0483629679 0.0176128278 0.038146694 ## 41 0.025603659 -0.026396076 -0.0404551064 0.0412848488 -0.022985895 ## 42 0.043757716 0.032100523 -0.0634511186 0.0569057716 0.055658047 ## 43 0.004803843 -0.001807494 -0.0055142963 -0.0270443839 0.020187176 ## 44 0.023088835 -0.030036862 -0.0040772600 0.0081787304 0.025915021 ## 45 -0.024694763 0.006235557 -0.0726691809 -0.0007567561 -0.044539992 ## 46 0.008429598 -0.030943379 0.0074557175 0.0006690425 -0.055852617 ## 47 0.100211466 0.049625021 0.0003304394 0.0193240285 -0.019074317 ## 48 0.006258276 0.018976399 0.0313634016 -0.0816237730 0.013241165 ## 49 -0.019233910 -0.019050685 0.0239066695 0.0072822930 -0.006487026 ## 50 -0.010233299 -0.010108650 0.0377406017 -0.0651116988 -0.003898574 ## 51 -0.074751459 0.014285158 0.0156977988 -0.0307723783 0.024073411 ## 52 -0.012044019 -0.019118957 -0.0002444917 0.0269709743 -0.013376911 ## 53 -0.013271391 -0.028553139 0.0191524295 0.0473963414 0.008459835 ## 54 0.022151144 -0.028516945 -0.0073250495 0.0149849351 -0.008001277 ## 55 -0.092169655 -0.020978271 0.0142256494 -0.0537558984 -0.024583900 ## 56 -0.003534186 -0.033763089 0.0275567374 -0.0077100766 -0.004994291 ## 57 -0.001567351 0.041151180 -0.0049713337 0.0179639307 0.006567013 ## 58 -0.009633274 0.046536452 -0.0275773624 0.0561740808 0.012139881 ## 59 -0.004593441 -0.018482965 -0.0007014041 -0.0091956304 0.012275173 ## 60 -0.003909064 -0.013973943 0.0578358560 -0.0310650176 -0.036089210 ## 61 -0.030654312 0.003009323 0.0307571021 -0.0417347298 0.033439548 ## 62 -0.039770554 0.041403620 -0.0038409700 0.0020715501 0.004420062 ## 63 0.024598141 -0.027629067 -0.0415701289 -0.0052244439 0.019515687 ## 64 -0.021989961 0.015417525 -0.0112320353 -0.0109183137 -0.024856001 ## 65 0.017642506 0.005680885 0.0085821287 0.0145294451 -0.071757676 ## 66 0.062371139 0.022188952 -0.0158903073 0.0332440661 -0.003534504 ## 67 -0.020347562 0.010346666 -0.0153019275 0.0218580579 -0.012637531 ## 68 0.008436941 0.014104598 -0.0236966750 0.0194280894 0.026667414 ## 69 0.053653426 0.029991254 0.0006474882 -0.0149502523 -0.023683592 ## 70 -0.021546320 -0.006824151 0.0228603599 0.0204461225 0.023800278 ## Axis.27 Axis.28 Axis.29 Axis.30 Axis.31 ## 1 -0.0214489348 -0.0062493017 0.0005904075 -0.0098185124 0.0002576620 ## 2 -0.0018257707 0.0007192033 -0.0060382759 0.0252139281 0.0449648727 ## 3 -0.0230905950 0.0459988987 -0.0145453326 -0.0069991267 0.0133689950 ## 4 0.0106510843 -0.0582517939 -0.0183645997 0.0121981876 -0.0358175465 ## 5 0.0310533762 -0.0017150785 0.0514465327 0.0714369118 -0.0151264400 ## 6 -0.0413952413 0.0277986881 -0.0127963105 -0.0132924710 0.0249466938 ## 7 -0.0434234759 0.0126047551 0.0038049668 -0.0052145017 -0.0632259337 ## 8 -0.0280980176 -0.0175207970 -0.0059972747 0.0092652975 -0.0039279369 ## 9 0.0150038615 0.0522817116 0.0082975396 -0.0177932521 -0.0210459397 ## 10 0.0550203506 -0.0064864577 -0.0035575446 -0.0108387469 0.0185434607 ## 11 -0.0042753709 -0.0150529779 0.0670866905 -0.0080975105 0.0337201840 ## 12 -0.0312721604 -0.0037783797 0.0222792189 -0.0351956927 0.0423692092 ## 13 0.0177882370 0.0133480681 -0.0052239919 -0.0208074324 -0.0132163250 ## 14 -0.0358830147 -0.0279213051 0.0014769046 0.0004334194 -0.0043077515 ## 15 -0.0248318804 -0.0092380051 -0.0177418509 0.0128708998 0.0061136295 ## 16 -0.0252088165 -0.0271021422 0.0467064640 0.0190021463 -0.0224382992 ## 17 -0.0377047263 -0.0591888106 0.0013912891 -0.0192558738 0.0215036364 ## 18 0.1110065546 0.0204471578 0.0266087892 -0.0486169465 0.0003625703 ## 19 -0.0117987667 -0.0257447959 -0.0667356492 0.0217256780 0.0203420725 ## 20 0.0289764253 0.0521870718 0.0138145333 -0.0120594776 0.0110135048 ## 21 -0.0113635420 0.0079184964 -0.0043510810 -0.0381929707 -0.0091066208 ## 22 -0.0382993472 0.0107828833 -0.0069340389 0.0284098164 0.0318818830 ## 23 0.0399641087 -0.0350229029 0.0244152678 -0.0363308802 0.0313227941 ## 24 0.0469243293 -0.0325680546 -0.0296103161 0.0361556853 0.0434139088 ## 25 0.0476790031 -0.0143709167 -0.0707650961 -0.0476826989 -0.0238758739 ## 26 -0.0134611769 0.0318026261 -0.0305535669 0.0055644150 -0.0050692293 ## 27 0.0369995086 0.0053703578 -0.0110926849 -0.0105625149 -0.0592820566 ## 28 -0.0038029798 0.0070580280 -0.0011800054 -0.0161664275 -0.0166779299 ## 29 -0.0100094651 0.0162433440 -0.0041247438 0.0218673099 -0.0241213008 ## 30 0.0327289508 -0.0516424466 -0.0059136579 0.0397235717 -0.0147868792 ## 31 0.0135065688 0.0376298489 0.0017446882 0.0222509850 0.0088253457 ## 32 -0.0033455770 -0.0008101316 -0.0488419005 0.0089879326 -0.0373315002 ## 33 -0.0255530572 0.0731260724 0.0324018886 -0.0052977609 0.0332144234 ## 34 -0.0530728067 -0.0042314954 0.0714480322 0.0134570285 -0.0166931185 ## 35 0.0109757721 -0.0284798781 -0.0017207441 0.0628434968 0.0235285119 ## 36 -0.0034083605 0.0628324835 -0.0282645754 0.0116761180 -0.0211710294 ## 37 0.0034393932 -0.0111674618 0.0305521344 -0.0364791504 -0.0019428642 ## 38 -0.0315624396 -0.0168141537 0.0129373373 -0.0240528204 -0.0034672596 ## 39 0.0097854651 0.0279607816 0.0089584803 -0.0100916690 0.0061073178 ## 40 -0.0352206447 0.0206039473 -0.0062121194 -0.0173187156 0.0036841251 ## 41 -0.0151240745 0.0010622221 0.0278677346 0.0083462099 -0.0508889960 ## 42 -0.0114842209 -0.0534966140 0.0033315478 -0.0028085996 -0.0124117182 ## 43 0.0167170676 -0.0141925247 0.0231283735 0.0028018260 0.0018106653 ## 44 -0.0017622609 0.0155812834 -0.0167785673 0.0162111915 -0.0108387588 ## 45 -0.0045449602 0.0017673982 0.0146474457 -0.0065889495 0.0095181873 ## 46 0.0121643678 -0.0127435487 0.0193114085 0.0023655311 0.0030121056 ## 47 0.0026465175 0.0323911632 0.0150391106 0.0080151446 0.0197120488 ## 48 -0.0484105081 -0.0726902697 -0.0197390565 -0.0362241219 0.0239513142 ## 49 -0.0134510101 -0.0128910977 -0.0104135389 0.0097521029 0.0045581559 ## 50 0.0167054437 0.0199320911 -0.0193070994 0.0546327629 0.0190375608 ## 51 0.0252331870 -0.0009875097 0.0034476035 -0.0081223988 0.0299794563 ## 52 0.0294332679 0.0130384055 -0.0030962415 0.0223830028 -0.0030494214 ## 53 0.0042006345 -0.0007718911 0.0056639463 -0.0227457598 -0.0132682296 ## 54 0.0024225437 0.0258593133 -0.0228528265 0.0021265663 0.0019810891 ## 55 0.0254698968 0.0065970763 0.0113244053 0.0054839764 0.0103950787 ## 56 0.0174164770 0.0240398402 -0.0119526633 -0.0054691526 0.0177730547 ## 57 -0.0297689604 0.0238298835 -0.0151576827 -0.0136784538 -0.0025749689 ## 58 0.0289761364 -0.0400599929 -0.0009706409 0.0035309994 -0.0094606071 ## 59 0.0132983773 -0.0010944863 0.0030521686 0.0138627378 0.0204883760 ## 60 -0.0049639073 -0.0309751304 0.0028734066 -0.0557648928 0.0056917335 ## 61 -0.0160031598 0.0167434304 0.0053205537 0.0087701552 -0.0197227818 ## 62 0.0032113281 0.0030168213 -0.0162370868 0.0221897116 -0.0092914700 ## 63 -0.0437055098 0.0212661966 -0.0028278305 0.0199058418 -0.0151101158 ## 64 0.0171760139 0.0077014306 0.0016350446 0.0014059253 0.0046139875 ## 65 0.0232413040 -0.0133783814 0.0348026147 0.0096684387 0.0058536784 ## 66 0.0071036630 -0.0195644072 -0.0129221615 0.0263891796 -0.0127991543 ## 67 0.0167799078 -0.0236396424 0.0248162406 -0.0042188572 -0.0440954317 ## 68 -0.0193685409 0.0037146733 -0.0322523694 0.0004210092 0.0242485474 ## 69 -0.0053493050 0.0009760003 -0.0671527188 -0.0321081413 0.0062049494 ## 70 -0.0004065372 0.0056111297 0.0300030748 -0.0234506602 -0.0121713013 ## Axis.32 Axis.33 Axis.34 Axis.35 ## 1 3.510752e-02 0.0330537797 0.0064130595 3.099937e-03 ## 2 -7.282958e-03 0.0084330757 0.0124690915 6.786092e-03 ## 3 1.217735e-02 -0.0092968600 0.0134000578 -2.125948e-02 ## 4 -5.574305e-02 0.0149621804 -0.0117199065 4.489755e-03 ## 5 -1.324568e-02 -0.0075264555 -0.0034528252 1.647750e-03 ## 6 -9.055993e-03 -0.0126035392 0.0155388726 7.666602e-03 ## 7 -1.212234e-03 0.0127056432 -0.0056336788 1.394855e-02 ## 8 4.594964e-02 0.0173325658 -0.0015677204 -1.062034e-02 ## 9 -1.638890e-02 -0.0119287062 -0.0338301707 -4.068784e-04 ## 10 1.801940e-02 -0.0020138441 -0.0314317463 1.322075e-03 ## 11 -2.123204e-02 -0.0213312551 -0.0114671193 9.854437e-03 ## 12 -1.249415e-02 0.0390694185 0.0071184506 -2.401359e-02 ## 13 5.987312e-03 -0.0101920667 0.0049739037 -1.566912e-03 ## 14 -2.980406e-03 0.0174372896 0.0066029480 1.843012e-02 ## 15 7.454551e-03 0.0050672473 0.0238078426 -1.283033e-03 ## 16 4.664383e-03 -0.0412186706 0.0415721350 -3.950347e-05 ## 17 -6.167162e-03 0.0144790824 -0.0064490785 1.282354e-02 ## 18 1.830630e-02 -0.0332296397 0.0058819323 -8.862927e-03 ## 19 -4.846018e-03 -0.0453632580 0.0018132032 3.197985e-03 ## 20 -3.450014e-02 0.0144161544 -0.0025490666 -8.333917e-03 ## 21 -1.896468e-02 0.0021186673 -0.0092023192 -2.753702e-03 ## 22 -2.470002e-02 -0.0082942666 0.0067085986 -5.809050e-03 ## 23 1.383753e-02 0.0324447828 -0.0032135908 2.392182e-03 ## 24 3.801842e-02 -0.0131890589 -0.0017748227 9.571190e-03 ## 25 -1.414439e-02 -0.0041638583 0.0147097953 -9.891806e-03 ## 26 1.961504e-02 0.0272383226 -0.0092618349 1.556238e-02 ## 27 2.488080e-02 0.0177689818 0.0126005331 4.184439e-03 ## 28 -2.536238e-02 -0.0147246274 -0.0183805721 -2.103705e-03 ## 29 -1.568484e-02 -0.0036095441 0.0013930586 3.792005e-03 ## 30 8.585959e-05 0.0191575625 -0.0193990584 -8.605473e-03 ## 31 5.624822e-03 -0.0002089641 -0.0075711978 -5.410577e-04 ## 32 1.120639e-02 -0.0190568202 0.0057916623 -9.588107e-03 ## 33 1.698908e-02 -0.0155822174 -0.0037558585 -6.778566e-03 ## 34 3.071256e-02 -0.0204598348 -0.0112964196 -1.369937e-02 ## 35 1.207238e-02 0.0030738942 -0.0143359751 -1.053930e-02 ## 36 -3.068529e-02 0.0217505233 0.0050341596 -7.745756e-03 ## 37 2.547492e-02 0.0137135067 0.0221998203 6.385784e-03 ## 38 -5.316307e-03 -0.0156909943 0.0136055800 2.352438e-03 ## 39 -7.467045e-03 0.0079694518 0.0084433326 9.186845e-03 ## 40 5.878099e-04 -0.0008690955 0.0015844459 6.201978e-03 ## 41 2.095992e-02 0.0064914656 -0.0143665545 -6.266448e-04 ## 42 -1.575755e-02 -0.0046578297 0.0015868157 -6.418221e-03 ## 43 -1.364468e-02 -0.0017398831 0.0072978490 7.951869e-03 ## 44 1.811432e-02 0.0056957559 -0.0076106786 2.956302e-03 ## 45 1.452626e-02 -0.0081496465 -0.0067340754 4.731944e-03 ## 46 -5.291376e-03 -0.0026911453 -0.0067170862 4.111421e-03 ## 47 -2.065112e-02 0.0001675641 -0.0251276297 1.554287e-02 ## 48 1.597797e-03 -0.0082973070 -0.0264576803 -1.451270e-02 ## 49 -1.245360e-02 0.0065924763 0.0073839142 -6.417907e-03 ## 50 3.272533e-03 0.0177346351 -0.0087642293 -5.738138e-03 ## 51 -2.984018e-02 -0.0042623257 0.0285669454 5.221643e-03 ## 52 1.579617e-02 0.0086392722 0.0179429757 1.226834e-03 ## 53 1.499405e-02 0.0043424790 -0.0049312717 1.843771e-04 ## 54 1.397514e-02 0.0082247936 0.0002817281 1.785904e-03 ## 55 -2.566738e-02 0.0054366397 0.0057942811 7.943804e-03 ## 56 1.199141e-02 0.0013465563 -0.0034659503 1.493599e-03 ## 57 4.490482e-03 0.0043205427 -0.0093614018 -8.452111e-04 ## 58 7.178215e-03 0.0027775535 0.0311719961 -1.310182e-04 ## 59 -1.609972e-03 -0.0105622044 0.0085364730 -2.390268e-03 ## 60 2.523931e-03 -0.0067345871 -0.0232747076 -2.962267e-03 ## 61 -7.867086e-04 0.0127251920 0.0048373495 -5.676931e-05 ## 62 -1.834353e-02 -0.0027708817 0.0063045039 -5.620415e-03 ## 63 3.018902e-03 -0.0121693026 -0.0005458156 -5.555145e-03 ## 64 1.863758e-02 -0.0067412687 -0.0086869155 1.096419e-02 ## 65 -2.374383e-02 0.0394753730 0.0119960228 -1.590973e-02 ## 66 4.393773e-03 -0.0058721577 -0.0106343099 -2.647808e-03 ## 67 -1.203905e-02 -0.0288067193 -0.0066613416 -6.225101e-03 ## 68 3.970740e-03 -0.0193941859 -0.0080688470 7.618608e-03 ## 69 -1.967131e-03 -0.0121338719 0.0014419782 4.158236e-03 ## 70 3.056504e-03 -0.0006255353 0.0128961404 1.171213e-02 ## ## $trace ## [1] 27.20504 ## ## attr(,&quot;class&quot;) ## [1] &quot;pcoa&quot; biplot.pcoa(mite.spe.h.pcoa, mite.spe.hel, dir.axis2 = -1) Les espèces 16 et 31 sont plus éloignées des autres espèces en termes de distance, et donc leur distribution entre les sites est très différente de celle des autres espèces d’acariens. Les sites dont les étiquettes se chevauchent sont de bons exemples de sites à forte similarité en termes de communautés d’acariens. "],["positionnement-multidimensionnel-non-métrique.html", "Chapitre 16 Positionnement multidimensionnel non-métrique", " Chapitre 16 Positionnement multidimensionnel non-métrique Les méthodes d’ordination non contrainte présentées ci-dessus permettent d’organiser les objets (ex. les sites) caractérisés par des descripteurs (ex. les espèces) dans un espace comprenant l’ensemble des dimensions décrites par l’ellipsoïde représentant le nuage des points de données. En d’autres termes, la PCA, la CA et la PCoA calculent un grand nombre d’axes d’ordination (nombre proportionnel au nombre de descripteurs) représentant la variation des descripteurs entre sites et préservant les distances entre objets (distance euclidienne dans une PCA, distance de Chi2 dans une CA et distance définie par l’utilisateur dans une PCoA). L’utilisateur peut ensuite sélectionner les axes d’intérêt (généralement les deux premiers axes d’ordination) pour représenter les objets dans un biplot. Le biplot produit représente ainsi correctement les distances entre objets (ex. la similarité des sites), mais ne permet pas de représenter l’ensemble des dimensions de la variation dans l’espace d’ordinations (étant donnée que l’Axe 3, l’Axe 4,..., l’Axe n’apparaissent pas sur le biplot, mais contribuent tout de même à expliquer la variation entre objets). Dans certains cas, la priorité n’est pas de préserver la distance exacte entre les objets, mais au contraire de représenter aussi fidèlement que possible les relations entre objets selon un petit nombre d’axes (généralement deux ou trois) spécifiés par l’utilisateur. Dans de tels cas, le positionnement multidimensionnel non-métrique (NMDS) est la solution. Si l’utilisateur définit un nombre d’axe égal à deux, le biplot produit par le NMDS correspond à la meilleure solution graphique pour représenter en deux dimensions la similarité entre objets (les objets dissimilaires étant les plus éloignées, et les objets similaires étant les plus proches). De plus, le NMDS permet à l’utilisateur de choisir la mesure de distance qu’il souhaite pour ordonner les objets. Afin de trouver la meilleure représentation des objets, le NMDS applique une procédure itérative qui vise à positionner les objets dans le nombre spécifié de dimensions de façon à minimiser une fonction de stress (variant de 0 à 1) qui mesure la qualité de l’ajustement de la distance entre objets dans l’espace d’ordination. Ainsi, plus la valeur du stress sera faible, plus la représentation des objets dans l’espace d’ordination sera exacte. Un second moyen d’évaluer l’exactitude d’un NMDS consiste à construire un diagramme de Shepard qui représente les distances entre objets sur le biplot d’ordination en fonction de leurs distances réelles. Le R2 obtenu à partir de la régression entre ces deux types de distance mesure la qualité de l’ajustement du NMDS. # NMDS spe.nmds &lt;- metaMDS(spe[-8, ], distance = &quot;bray&quot;, k = 2) ## Run 0 stress 0.07477802 ## Run 1 stress 0.111719 ## Run 2 stress 0.08930117 ## Run 3 stress 0.08695583 ## Run 4 stress 0.1111013 ## Run 5 stress 0.07376231 ## ... New best solution ## ... Procrustes: rmse 0.0193857 max resid 0.09468128 ## Run 6 stress 0.1208397 ## Run 7 stress 0.08801545 ## Run 8 stress 0.08886177 ## Run 9 stress 0.1254006 ## Run 10 stress 0.09301033 ## Run 11 stress 0.07429352 ## Run 12 stress 0.11418 ## Run 13 stress 0.124022 ## Run 14 stress 0.07478404 ## Run 15 stress 0.07506665 ## Run 16 stress 0.07478439 ## Run 17 stress 0.08843925 ## Run 18 stress 0.1215491 ## Run 19 stress 0.1119525 ## Run 20 stress 0.0747782 ## *** Best solution was not repeated -- monoMDS stopping criteria: ## 20: stress ratio &gt; sratmax ### Extraction des résultats spe.nmds ## ## Call: ## metaMDS(comm = spe[-8, ], distance = &quot;bray&quot;, k = 2) ## ## global Multidimensional Scaling using monoMDS ## ## Data: spe[-8, ] ## Distance: bray ## ## Dimensions: 2 ## Stress: 0.07376231 ## Stress type 1, weak ties ## Best solution was not repeated after 20 tries ## The best solution was from try 5 (random start) ## Scaling: centring, PC rotation, halfchange scaling ## Species: expanded scores based on &#39;spe[-8, ]&#39; ### Évaluation de la qualité de l&#39;ajustement et ### construction du diagramme de Shepard spe.nmds$stress ## [1] 0.07376231 stressplot(spe.nmds, main = &quot;Shepard plot&quot;) # Construction du biplot plot(spe.nmds, type = &quot;none&quot;, main = paste(&quot;NMDS/Bray - Stress=&quot;, round(spe.nmds$stress, 3)), xlab = c(&quot;NMDS1&quot;), ylab = c(&quot;NMDS2&quot;)) points(scores(spe.nmds, display = &quot;sites&quot;, choices = c(1, 2)), pch = 21, col = &quot;black&quot;, bg = &quot;steelblue&quot;, cex = 1.2) text(scores(spe.nmds, display = &quot;species&quot;, choices = c(1)), scores(spe.nmds, display = &quot;species&quot;, choices = c(2)), labels = rownames(scores(spe.nmds, display = &quot;species&quot;)), col = &quot;red&quot;, cex = 0.8) Le diagramme de Shepard identifie une forte corrélation entre les distances observées et les distances de l’ordination (R2 &gt; 0.95), et donc une bonne qualité de l’ajustement du NMDS. Le biplot du NMDS identifie un groupe de sites caractérisés par les espèces BLA, TRU, VAI, LOC, CHA et OMB, tandis que les autres espèces caractérisent un groupe de sites situés dans le coin supérieur droit du biplot. Quatre sites situés dans le coin inférieur droit sont fortement différents des autres. Défi 6 Exécuter un NMDS sur les données d’abondance des espèces d’acariens (données mite) en deux dimensions à partir de distances de Bray-Curtis. Évaluer la qualité de l’ajustement et interpréter le biplot. Défi 5 - Solution ### NMDS mite.spe.nmds &lt;- metaMDS(mite.spe, distance = &quot;bray&quot;, k = 2) ## Square root transformation ## Wisconsin double standardization ## Run 0 stress 0.1491318 ## Run 1 stress 0.151487 ## Run 2 stress 0.1679176 ## Run 3 stress 0.1515057 ## Run 4 stress 0.1520772 ## Run 5 stress 0.1551167 ## Run 6 stress 0.1510129 ## Run 7 stress 0.1620419 ## Run 8 stress 0.1562872 ## Run 9 stress 0.1509079 ## Run 10 stress 0.1520875 ## Run 11 stress 0.1549726 ## Run 12 stress 0.1567007 ## Run 13 stress 0.1520777 ## Run 14 stress 0.1654614 ## Run 15 stress 0.1547785 ## Run 16 stress 0.1561961 ## Run 17 stress 0.1588164 ## Run 18 stress 0.1613784 ## Run 19 stress 0.1660381 ## Run 20 stress 0.1629153 ## *** Best solution was not repeated -- monoMDS stopping criteria: ## 20: stress ratio &gt; sratmax ### Extraction des résultats mite.spe.nmds ## ## Call: ## metaMDS(comm = mite.spe, distance = &quot;bray&quot;, k = 2) ## ## global Multidimensional Scaling using monoMDS ## ## Data: wisconsin(sqrt(mite.spe)) ## Distance: bray ## ## Dimensions: 2 ## Stress: 0.1491318 ## Stress type 1, weak ties ## Best solution was not repeated after 20 tries ## The best solution was from try 0 (metric scaling or null solution) ## Scaling: centring, PC rotation, halfchange scaling ## Species: expanded scores based on &#39;wisconsin(sqrt(mite.spe))&#39; ### Évaluation de la qualité de l&#39;ajustement mite.spe.nmds$stress ## [1] 0.1491318 stressplot(mite.spe.nmds, main = &quot;Shepard plot&quot;) ### Construction du biplot plot(mite.spe.nmds, type = &quot;none&quot;, main = paste(&quot;NMDS/Bray - Stress=&quot;, round(mite.spe.nmds$stress, 3)), xlab = c(&quot;NMDS1&quot;), ylab = c(&quot;NMDS2&quot;)) points(scores(mite.spe.nmds, display = &quot;sites&quot;, choices = c(1, 2)), pch = 21, col = &quot;black&quot;, bg = &quot;steelblue&quot;, cex = 1.2) text(scores(mite.spe.nmds, display = &quot;species&quot;, choices = c(1)), scores(mite.spe.nmds, display = &quot;species&quot;, choices = c(2)), labels = rownames(scores(mite.spe.nmds, display = &quot;species&quot;)), col = &quot;red&quot;, cex = 0.8) La corrélation entre distance observée et distance d’ordination (R2 &gt; 0.91) et la valeur de stress relativement faible identifient une bonne qualité de l’ajustement du NMDS. Aucun groupe de sites ne peut être précisément identifié à partir du biplot, ce qui montre que la plupart des espèces sont présentes dans la plupart des sites, i.e. peu de sites présentent des communautés distinctes. "],["sommaire.html", "Chapitre 17 Sommaire", " Chapitre 17 Sommaire L’ordination constitue une puissante méthode d’analyse pour étudier les relations entre objets caractérisés par différents descripteurs (ex. des sites décrits par leurs communautés biologiques, ou leurs variables environnementales), mais de nombreuse méthodes d’ordination existent. Ces méthodes diffèrent principalement par le type de distance qu’elles préservent, le type de variables qu’elles autorisent, et le nombre de dimensions de l’espace d’ordination. Pour mieux guider votre choix de la méthode d’ordination à utiliser, le tableau ci-dessous identifie les caractéristiques de chacune des quatre méthodes d’ordination présentées lors de cet atelier. Lors du prochaine atelier, vous verrez comment identifier les relations entre variables environnementales et communautés biologiques décrivant un même ensemble de sites, à l’aide des méthodes d’analyses canoniques. "],["resources-additionnels.html", "Chapitre 18 Resources additionnels", " Chapitre 18 Resources additionnels "],["réferences.html", "Chapitre 19 Réferences", " Chapitre 19 Réferences "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
